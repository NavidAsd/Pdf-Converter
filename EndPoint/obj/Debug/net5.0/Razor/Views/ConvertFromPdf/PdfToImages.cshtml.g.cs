#pragma checksum "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "f9c46bf2db3e9c4a7e524d31c9cf142cd58bbfaee4b8606bc2a19c2e0227fb88"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ConvertFromPdf_PdfToImages), @"mvc.1.0.view", @"/Views/ConvertFromPdf/PdfToImages.cshtml")]
namespace AspNetCore
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "S:\navid\PdfConverter\EndPoint\Views\_ViewImports.cshtml"
using EndPoint;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "S:\navid\PdfConverter\EndPoint\Views\_ViewImports.cshtml"
using EndPoint.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"f9c46bf2db3e9c4a7e524d31c9cf142cd58bbfaee4b8606bc2a19c2e0227fb88", @"/Views/ConvertFromPdf/PdfToImages.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"4359f7b64bc44f353b6ba2c74169ca926fe29f79fcf1cc193d694a5e6fd5976e", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_ConvertFromPdf_PdfToImages : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Common.ResultMessage<Application.Services.Query.ReturnFeatureDetails.ResultReturnFeatureDetailsDto>>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/loading.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/Content.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/Imagesdrowdown.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Sweetalert2/sweetalert2.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("width", new global::Microsoft.AspNetCore.Html.HtmlString("25"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/pdftoconverter-reset.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("cursor:pointer"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/uploadfile-convert.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/bootstrap.bundle.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Sweetalert2/sweetalert2.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("Details"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
  
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\n");
            DefineSection("Header", async() => {
                WriteLiteral("\n                    <link rel=\"canonical\"");
                BeginWriteAttribute("href", " href=\"", 326, "\"", 380, 2);
#nullable restore
#line 8 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 333, Common.GetPath.GetDomainHttps(), 333, 32, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 365, "/pdf-to-images/", 365, 15, true);
                EndWriteAttribute();
                WriteLiteral(" />\n    ");
#nullable restore
#line 9 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
Write(await Component.InvokeAsync("GetMetaTags", "PdfToImages"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f9c46bf2db3e9c4a7e524d31c9cf142cd58bbfaee4b8606bc2a19c2e0227fb889389", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f9c46bf2db3e9c4a7e524d31c9cf142cd58bbfaee4b8606bc2a19c2e0227fb8810605", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f9c46bf2db3e9c4a7e524d31c9cf142cd58bbfaee4b8606bc2a19c2e0227fb8811822", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f9c46bf2db3e9c4a7e524d31c9cf142cd58bbfaee4b8606bc2a19c2e0227fb8813039", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                    <style>
                        .upload .upload-files .body p b,
                        .upload .upload-files .body p a {
                            color: #7E57C2 !important;
                        }

                        .upload .upload-files footer .importar,
                        .upload .upload-files footer .upload-btn {
                            color: #fff !important;
                            background-color: #7E57C2 !important;
                        }

                        .upload .upload-files footer .divider {
                            border-top: solid 4px #5b20c2;
                        }

                        .upload .upload-files header {
                            background: #7E57C2 !important;
                        }

                        .upload .upload-files footer .list-files .file .progress {
                            background: linear-gradient(to left, #ffc92860, #7E57C2) no-repeat;
                        }

                        ");
                WriteLiteral(@".upload .upload-files footer .list-files .file .done {
                            background: #7E57C2
                        }

                        .dropdown-label {
                            color: #7E57C2;
                        }
                    </style>
");
            }
            );
            WriteLiteral(@"
    <br />
    <br />

    <!-- start main -->
    <main>
        <div class=""container"">
            <!-- start home main -->
            <div class=""home-main text-center"">
                <!-- start file upload box -->
                <div class=""section main-file-upload-box"">
                    <div class=""row align-items-center text-center"">
                        <div class=""col-12"">
                            <div class=""file-upload-box-header d-flex text-center align-items-center justify-content-center w-100 mt-5"">
                                <svg style=""width: 34px; height: 34px"" viewBox=""0 0 24 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""><path d=""M0 4C0 1.79086 1.79086 0 4 0H20C22.2091 0 24 1.79086 24 4V20C24 22.2091 22.2091 24 20 24H4C1.79086 24 0 22.2091 0 20V4Z"" fill=""#7E57C2""></path><path d=""M10.5 15.5H5.5V5.5H13.5V8.5"" stroke=""white""></path><rect x=""10.5"" y=""8.5"" width=""8"" height=""10"" stroke=""white""></rect><path d=""M10.5 15.5L12 14L14.5 16.5L16 15L18.5 17.5"" stroke=""white""></path");
            WriteLiteral(@"><circle cx=""16"" cy=""11"" r=""0.5"" fill=""white"" stroke=""white""></circle></svg>
                                <h1 class=""h3 ms-3"">Convert PDF To </h1>
                                <div class=""dropdown"">
                                    <button class=""dropdown-label"">
                                        <button type=""button"" class=""dropdown-label"" id=""btnFileFormat""");
            BeginWriteAttribute("name", " name=\"", 3451, "\"", 3458, 0);
            EndWriteAttribute();
            WriteLiteral(">JPG</button>\n                                        <i id=\"FileFormatService\" style=\"display:none\">");
#nullable restore
#line 66 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                                  Write(Domain.Entities.Features.ConvertFromPdf.PdfToJpg);

#line default
#line hidden
#nullable disable
            WriteLiteral("</i>\n                                        <div class=\"dropdown-items\" style=\"position: fixed; z-index: 999;\">\n                                            <a style=\"cursor:pointer\"");
            BeginWriteAttribute("onclick", " onclick=\"", 3791, "\"", 3871, 4);
            WriteAttributeValue("", 3801, "SetFormat(\'PNG\',", 3801, 16, true);
            WriteAttributeValue(" ", 3817, "\'", 3818, 2, true);
#nullable restore
#line 68 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 3819, Domain.Entities.Features.ConvertFromPdf.PdfToPng, 3819, 49, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 3868, "\')", 3869, 3, true);
            EndWriteAttribute();
            WriteLiteral(" class=\"dropdown-item\">PNG</a>\n                                            <a style=\"cursor:pointer\"");
            BeginWriteAttribute("onclick", " onclick=\"", 3972, "\"", 4051, 3);
            WriteAttributeValue("", 3982, "SetFormat(\'BMP\',\'", 3982, 17, true);
#nullable restore
#line 69 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 3999, Domain.Entities.Features.ConvertFromPdf.PdfToBmp, 3999, 49, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 4048, "\')", 4049, 3, true);
            EndWriteAttribute();
            WriteLiteral(" class=\"dropdown-item\">BMP</a>\n                                            <a style=\"cursor:pointer\"");
            BeginWriteAttribute("onclick", " onclick=\"", 4152, "\"", 4231, 4);
            WriteAttributeValue("", 4162, "SetFormat(\'JPG\',\'", 4162, 17, true);
#nullable restore
#line 70 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 4179, Domain.Entities.Features.ConvertFromPdf.PdfToJpg, 4179, 49, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 4228, "\'", 4228, 1, true);
            WriteAttributeValue(" ", 4229, ")", 4230, 2, true);
            EndWriteAttribute();
            WriteLiteral(" class=\"dropdown-item\">JPG</a>\n                                            <a style=\"cursor:pointer\"");
            BeginWriteAttribute("onclick", " onclick=\"", 4332, "\"", 4411, 4);
            WriteAttributeValue("", 4342, "SetFormat(\'GIF\',", 4342, 16, true);
            WriteAttributeValue(" ", 4358, "\'", 4359, 2, true);
#nullable restore
#line 71 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 4360, Domain.Entities.Features.ConvertFromPdf.PdfToGif, 4360, 49, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 4409, "\')", 4409, 2, true);
            EndWriteAttribute();
            WriteLiteral(" class=\"dropdown-item\">GIF</a>\n                                            <a style=\"cursor:pointer\"");
            BeginWriteAttribute("onclick", " onclick=\"", 4512, "\"", 4593, 4);
            WriteAttributeValue("", 4522, "SetFormat(\'TIFF\',\'", 4522, 18, true);
#nullable restore
#line 72 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 4540, Domain.Entities.Features.ConvertFromPdf.PdfToTiff, 4540, 50, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 4590, "\'", 4590, 1, true);
            WriteAttributeValue(" ", 4591, ")", 4592, 2, true);
            EndWriteAttribute();
            WriteLiteral(@" class=""dropdown-item"">TIFF</a>
                                        </div>
                                    </button>
                                </div>
                                <i class=""bi bi-caret-down-fill""></i>
                            </div>
                                <p>");
#nullable restore
#line 78 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                              Write(Model.Enything.FirstParagraph);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\n                                <p>");
#nullable restore
#line 79 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                              Write(Model.Enything.SecendParagraph);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</p>
                        </div>

                        <!-- upload file box -->
                        <div class=""col-12"">
                            <div class=""upload"">
                                <div class=""upload-files"">
                                    <a onclick=""selectttt()"" id=""triggerFile"">
                                        <header style=""cursor:pointer"" id=""headertriggerFile"">
                                            <p>
                                                <i class=""fa fa-cloud-upload"" aria-hidden=""true""></i>
                                                <span class=""up bi bi-cloud-arrow-up"">Choose</span>
                                                <span class=""load"">File</span>
                                            </p>
                                        </header>
                                    </a>
                                    <i id=""_Service"" style=""display:none"">");
#nullable restore
#line 95 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                     Write(Domain.Entities.Features.ConvertFromPdf.PdfToJpg);

#line default
#line hidden
#nullable disable
            WriteLiteral("</i>\n                                    <i id=\"_BaseService\" style=\"display:none\">");
#nullable restore
#line 96 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                         Write(Domain.Entities.Logs.AllServicesLog.ConverterLog);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</i>

                                    <div class=""body"" id=""drop"">
                                        <i class=""fa fa-file-text-o pointer-none"" aria-hidden=""true""></i>

                                        <p class=""pointer-none""> Or Upload From </p>
                                        <input type=""file"" id=""_upload"" multiple=""multiple"" accept=""application/pdf"" />

                                        <!-- upload from -->
                                        <div class=""upload-other-location"">
                                            <div class=""other-location-circle google-drive""><a href=""/GoogleDrive/auth"" data-bs-toggle=""tooltip"" data-bs-placement=""top"" title=""Google Drive""></a></div>
                                            <div class=""other-location-circle drop-box""><a href=""#"" data-bs-toggle=""tooltip"" data-bs-placement=""top"" title=""DropBox""></a></div>
                                        </div>
                                    </div>

                                   ");
            WriteLiteral(@" <footer>
                                        <div class=""divider"">
                                            <span><AR>FILE</AR></span>
                                        </div>
                                        <div class=""list-files"">
                                            <!--   template   -->
                                        </div>
                                        <div>
                                            <button onclick=""SendData()"" class=""up-convert-btn upload-btn btn visually-hidden"" data-bs-toggle=""modal"" data-bs-target=""#youremailmodal"">
                                                <span class=""btn-text"">Upload and Convert</span>
                                            </button>

                                        <button id=""btnUpdateFiles"" class=""importar btn"" title=""Reset"">");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f9c46bf2db3e9c4a7e524d31c9cf142cd58bbfaee4b8606bc2a19c2e0227fb8825815", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"</button>
                                        

                                            <div class=""btn-sniper btn"">
                                                <span class=""spinner-border spinner-border-sm"" role=""status"" aria-hidden=""true""></span>
                                            </div>
                                        </div>
                                    </footer>
                                    <footer>
                                        <button id=""btnTryConvert"" class=""importar btn"" style=""display:none"">Try Again</button>
                                    </footer>

                                    <!--Loading part-->
                                    <div id=""_Loading"" style=""display:none"">
                                        <svg class=""w-0"">
                                            <defs>
                                                <filter id=""w-0"">
                                                    <feGaussianBlur in=""SourceGraphic"" stdD");
            WriteLiteral(@"eviation=""7"" result=""blur"" />
                                                    <feColorMatrix in=""blur""
                                                               mode=""matrix""
                                                               values=""1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 20 -10""
                                                               result=""res"" />
                                                    <feComposite in=""SourceGraphic"" in2=""res"" operator=""atop"" />
                                                </filter>
                                            </defs>
                                        </svg>

                                        <svg class=""f-w-0"" width=""200"" height=""200"" viewBox=""0 0 200 200"">
                                            <defs>
                                                <linearGradient id=""linear-gradient"">
                                                    <stop class=""stop1"" offset=""0"" />
                                             ");
            WriteLiteral(@"       <stop class=""stop2"" offset=""1"" />
                                                </linearGradient>
                                                <linearGradient y2=""160""
                                                            x2=""160""
                                                            y1=""40""
                                                            x1=""40""
                                                            gradientUnits=""userSpaceOnUse""
                                                            id=""gradient""
                                                            xlink:href=""#linear-gradient"" />
                                            </defs>

                                            <path class=""path-class""
                                              d=""m 164,100 c 0,-35.346224 -28.65378,-64 -64,-64 -35.346224,0 -64,28.653776
           -64,64 0,35.34622 28.653776,64 64,64 35.34622,0 64,-26.21502 64,-64
           0,-37.784981 -26.92058,-64 -64,-64 -37.079421,");
            WriteLiteral(@"0 -65.267479,26.922736
           -64,64 1.267479,37.07726 26.703171,65.05317 64,64 37.29683,-1.05317
           64,-64 64,-64"" />
                                            <circle class=""cricle-class"" cx=""100"" cy=""100"" r=""64"" />

                                        </svg>
                                        <div class=""progress"">
                                            <div class=""progress-done"" id=""progressBar"" data-done=""70"">
                                                                                        
                                             </div>
                                        </div>
                                        <br>
                                        <h3 id=""status""></h3><br>
                                        <p id=""uploaded_progress""></p>
                                        <p>Processing...</p>
                                        <a onclick=""CancelProcess()"" class=""btn btn-outline-primary mt-4"">Cancel</a>

                            ");
            WriteLiteral(@"        </div>

                                    <!-- download part -->
                                    <div class=""dropdown"" id=""_Download"" style=""display:none"">
                                        <p>File SuccessFully Converted</p>
                                        <button");
            BeginWriteAttribute("style", " style=\"", 12482, "\"", 12490, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""btn btn-primary btn-lg dropdown-toggle px-5"" type=""button"" id=""dropdownMenuButton1"" data-bs-toggle=""dropdown"" aria-expanded=""false"">
                                            Download
                                        </button>
                                        <ul class=""dropdown-menu"" aria-labelledby=""dropdownMenuButton1"">
                                            <li><a class=""dropdown-item"" target=""_blank"" href=""#"" id=""btnDownload""> <i class=""bi bi-hdd-fill"" style=""font-size: 1rem; color: crimson;""></i> Download</a></li>
                                            <li><hr class=""dropdown-divider""></li>
                                            <li><a class=""dropdown-item"" href=""#""> <i class=""bi bi-google"" style=""font-size: 1rem; color: cornflowerblue;""></i> Send To GoogleDrive</a></li>
                                            <li><hr class=""dropdown-divider""></li>
                                            <li><a class=""dropdown-item"" href=""#""> <i class=""bi bi-box2-heart-fill");
            WriteLiteral(@""" style=""font-size: 1rem; color: cornflowerblue;""></i> Send To DropBox</a></li><!-- or this bi bi-archive-fill -->
                                            <li><hr class=""dropdown-divider""></li>
                                            <li><a class=""dropdown-item"" data-bs-toggle=""modal"" href=""#AddEmail""> <i class=""bi bi-envelope-paper-heart-fill"" style=""font-size: 1rem; color: crimson;""></i> Send To Your Email</a></li>
                                            <li><hr class=""dropdown-divider""></li>
                                            <li><a class=""dropdown-item"" target=""_blank"" href=""#"" id=""btnDownloadLink""> <i class=""bi bi-envelope-paper-heart-fill"" style=""font-size: 1rem; color: crimson;""></i> Download Link</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- end file upload");
            WriteLiteral(@" box -->
                <!-- start how work tools -->
                <div class=""section main-how-work-tools-box"">
                    <div class=""row justify-content-center text-center"">


                        <div class=""col-12 mb-5"">

                            <h2>How To Convert Pdf To IMages Online for Free</h2>
                            <p>You are only 3 steps away from converting the file</p>
                        </div>

                        <div class=""main-how-work-tools-content"">
                            <div class=""row align-items-center text-center"">

                                <!-- how work tools step 1 -->
                                <div class=""col-12 col-lg-4"">
                                    <div class=""work-tools-step-card"">
                                        <div class=""step-card-counter"">
                                            <div class=""counter rounded-circle"">1</div>
                                        </div>

");
#nullable restore
#line 232 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                     if (ViewBag.ThreeStepHelp.Success)
                                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                        <div class=\"step-card-body\">\n                                            ");
#nullable restore
#line 235 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                       Write(ViewBag.ThreeStepHelp.Enything.Step1);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                                                        </div>\n");
#nullable restore
#line 237 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                    }
                                    else
                                    {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                                        <div class=""step-card-body"">
                                                            By clicking on the large box above, you can select the desired file from the files in your system, and it is acceptable if the file has the correct format
                                                        </div>
");
#nullable restore
#line 243 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                </div>
                            </div>

                            <!-- how work tools step 2 -->
                            <div class=""col-12 col-lg-4"">
                                <div class=""work-tools-step-card"">
                                    <div class=""step-card-counter"">
                                        <div class=""counter rounded-circle"">2</div>
                                    </div>
                                    <div class=""step-card-body"">
");
#nullable restore
#line 254 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                         if (ViewBag.ThreeStepHelp.Success)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                            <div class=\"step-card-body\">\n                                                ");
#nullable restore
#line 257 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                           Write(ViewBag.ThreeStepHelp.Enything.Step2);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                                                            </div>\n");
#nullable restore
#line 259 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                        }
                                        else
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                                            <div class=""step-card-body"">
                                                                Using the buttons below the large box, you can upload the file to start the process or go back to the previous step to change the file
                                                            </div>
");
#nullable restore
#line 265 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                    </div>
                                </div>
                            </div>

                            <!-- how work tools step 3 -->
                            <div class=""col-12 col-lg-4"">
                                <div class=""work-tools-step-card"">
                                    <div class=""step-card-counter"">
                                        <div class=""counter rounded-circle"">3</div>
                                    </div>
                                    <div class=""step-card-body"">

");
#nullable restore
#line 278 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                         if (ViewBag.ThreeStepHelp.Success)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                            <div class=\"step-card-body\">\n                                                ");
#nullable restore
#line 281 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                           Write(ViewBag.ThreeStepHelp.Enything.Step3);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                                                            </div>\n");
#nullable restore
#line 283 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                        }
                                        else
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                                            <div class=""step-card-body"">
                                                                Processing does not take much time. After a few minutes, you can download the output file in 4 ways
                                                            </div>
");
#nullable restore
#line 289 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n");
#nullable restore
#line 296 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                     if (ViewBag.ThreeStepHelp.Enything.VideoName != null)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <h3>Video tutorial on how to convert PDF to Images</h3>\n                        <p>In this video, you will learn how to convert a PDF file to Images in a few minutes</p>\n");
#nullable restore
#line 300 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                        string posterName = "How-to-Convert-your-PDFs-to-Images.jpg";

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <video");
            BeginWriteAttribute("poster", " poster=\"", 19790, "\"", 19875, 3);
#nullable restore
#line 301 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 19799, Common.GetPath.GetHelpVideoPath().Replace("wwwroot", ""), 19799, 57, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 19856, "/poster/", 19856, 8, true);
#nullable restore
#line 301 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 19864, posterName, 19864, 11, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" alt=\"Help Video\" title=\"Video tutorial on working with tools\"");
            BeginWriteAttribute("style", " style=\"", 19938, "\"", 20030, 6);
            WriteAttributeValue("", 19946, "max-height:", 19946, 11, true);
#nullable restore
#line 301 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue(" ", 19957, Common.GetPath.GetVideoSize(), 19958, 30, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 19988, ";", 19988, 1, true);
            WriteAttributeValue(" ", 19989, "position:center;", 19990, 17, true);
            WriteAttributeValue(" ", 20006, "background-color:", 20007, 18, true);
            WriteAttributeValue(" ", 20024, "#000;", 20025, 6, true);
            EndWriteAttribute();
            WriteLiteral(" controls class=\"video-help\">\n");
#nullable restore
#line 302 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                             foreach (var item in Common.Formating.VideosFormat)
                            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                <source");
            BeginWriteAttribute("src", " src=\"", 20211, "\"", 20316, 3);
#nullable restore
#line 304 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 20217, Common.GetPath.GetHelpVideoPath().Replace("wwwroot", ""), 20217, 57, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 20274, "/", 20274, 1, true);
#nullable restore
#line 304 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 20275, ViewBag.ThreeStepHelp.Enything.VideoName, 20275, 41, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            BeginWriteAttribute("type", " type=\"", 20317, "\"", 20335, 2);
            WriteAttributeValue("", 20324, "video/", 20324, 6, true);
#nullable restore
#line 304 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 20330, item, 20330, 5, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\n");
#nullable restore
#line 305 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                            }

#line default
#line hidden
#nullable disable
            WriteLiteral("                            Your browser does not support the video display\n                                        </video>\n");
#nullable restore
#line 308 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </div>\n            </div>\n            <!-- end how work tools -->\n            <!-- start other content -->\n            ");
#nullable restore
#line 313 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
       Write(await Component.InvokeAsync("GetAdditionalHelp",Domain.Entities.Features.ConvertFromPdf.PdfToJpg));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            <!-- end other content -->\n            <!-- start section main services info box -->\n            ");
#nullable restore
#line 316 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
       Write(await Component.InvokeAsync("GetHelpContext",Model));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            <!-- end section main services info box -->\n            <!--start blog posts slides-->\n            ");
#nullable restore
#line 319 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
       Write(await Component.InvokeAsync("GetBlogPosts",Domain.Entities.Features.ConverterToPdf.ImagesToPdf));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            <!--end blog posts slides-->\n            <!-- end section main services info box -->\n            ");
#nullable restore
#line 322 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
       Write(await Component.InvokeAsync("GetTools"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            ");
#nullable restore
#line 323 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
       Write(await Component.InvokeAsync("GetFAQ",ViewBag.FAQ));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
            <!-- start sectin main people say about us -->
            <div class=""section main-people-say-about-us"">
                <div class=""row justify-content-center text-center"">

                    <div class=""col-12"">

                        <h3>The Best Online PDF to Images Converter</h3>
                        <h4>Some User Comments</h4>
                    </div>

                    <div class=""main-people-saying-content"">
                        <div class=""row justify-content-center text-center"">
                            <div class=""col-7"">
                                <div id=""carouselExampleIndicators"" class=""carousel carousel-dark slide"" data-bs-ride=""carousel"">
                                    <div class=""carousel-indicators"">
");
#nullable restore
#line 339 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                         if (ViewBag.Comments.Success)
                                        {
                                            int cvv = 0;
                                            

#line default
#line hidden
#nullable disable
#nullable restore
#line 342 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                             for (int i = 1; i <= ViewBag.Comments.Enything.Count; i++)
                                            {

                                                if (cvv == 0)
                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                                                    <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"");
#nullable restore
#line 347 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                                                                                                                                   Write(cvv);

#line default
#line hidden
#nullable disable
            WriteLiteral("\" class=\"active\" aria-current=\"true\"");
            BeginWriteAttribute("aria-label", " aria-label=\"", 22758, "\"", 22779, 2);
            WriteAttributeValue("", 22771, "Slide", 22771, 5, true);
#nullable restore
#line 347 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue(" ", 22776, i, 22777, 2, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral("></button>\n");
#nullable restore
#line 348 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                }
                                                else
                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                                                    <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"");
#nullable restore
#line 351 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                                                                                                                                   Write(cvv);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"");
            BeginWriteAttribute("aria-label", " aria-label=\"", 23133, "\"", 23154, 2);
            WriteAttributeValue("", 23146, "Slide", 23146, 5, true);
#nullable restore
#line 351 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue(" ", 23151, i, 23152, 2, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral("></button>\n");
#nullable restore
#line 352 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                }
                                                cvv += 1;
                                            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 354 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                             
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </div>\n\n                                    <div class=\"carousel-inner\">\n");
#nullable restore
#line 359 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                         if (ViewBag.Comments.Success)
                                        {
                                            int cv = 1;
                                            string classname = "";
                                            

#line default
#line hidden
#nullable disable
#nullable restore
#line 363 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                             foreach (var item in ViewBag.Comments.Enything)
                                            {
                                                classname = cv == 1 ? "carousel-item active" : "carousel-item";

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                                <div");
            BeginWriteAttribute("class", " class=\"", 24042, "\"", 24060, 1);
#nullable restore
#line 366 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 24050, classname, 24050, 10, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\n");
#nullable restore
#line 367 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                      
                                                        cv = 0;
                                                    

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                                    <div class=\"people-saying-card\">\n                                                                                        <h5 class=\"person-fullname\">");
#nullable restore
#line 371 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                                                               Write(item.UserName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h5>\n                                                                                        <div class=\"person-rate\">\n");
#nullable restore
#line 373 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                             for (int i = 1; i <= 5; i++)
                                                            {
                                                                

#line default
#line hidden
#nullable disable
#nullable restore
#line 375 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                 if (item.Rate >= i)
                                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                                                                                    <i class=\"bi bi-star-fill\" data-rating=\"");
#nullable restore
#line 377 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                                                                                                                       Write(i);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"></i>\n");
#nullable restore
#line 378 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                }
                                                                else
                                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                                                                                    <i class=\"bi bi-star\" data-rating=\"");
#nullable restore
#line 381 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                                                                                                                  Write(i);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"></i>\n");
#nullable restore
#line 382 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 382 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                 
                                                            }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                                        </div>\n                                                                                        <p>");
#nullable restore
#line 385 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                                                                      Write(item.Message);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\n                                                                                    </div>\n                                                                                </div>\n");
#nullable restore
#line 388 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 388 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                             
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- end sectin main people say about us -->
        </div>
        <!-- end home main -->
    </div>
</main>
<!-- end main -->
<!-- start rate this page -->
");
#nullable restore
#line 404 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
Write(await Component.InvokeAsync("GetRatingPart"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n<!-- end rate this page -->\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\n                <!-- script -->\n                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f9c46bf2db3e9c4a7e524d31c9cf142cd58bbfaee4b8606bc2a19c2e0227fb8859103", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f9c46bf2db3e9c4a7e524d31c9cf142cd58bbfaee4b8606bc2a19c2e0227fb8860237", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f9c46bf2db3e9c4a7e524d31c9cf142cd58bbfaee4b8606bc2a19c2e0227fb8861371", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f9c46bf2db3e9c4a7e524d31c9cf142cd58bbfaee4b8606bc2a19c2e0227fb8862506", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n\n                <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n                <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\n                <script");
                BeginWriteAttribute("src", " src=\"", 27078, "\"", 27172, 2);
                WriteAttributeValue("", 27084, "https://www.google.com/recaptcha/api.js?render=", 27084, 47, true);
#nullable restore
#line 415 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
WriteAttributeValue("", 27131, GoogleCaptchaConfig.Value.Google_SiteKey, 27131, 41, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral("></script>\n\n                <script>\n                    function selectttt() {\n                    //    grecaptcha.execute(\'");
#nullable restore
#line 419 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                         Write(GoogleCaptchaConfig.Value.Google_SiteKey);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', { action: 'submit' }).then(function(token) {
                     //       document.getElementById(""cpth"").value = token;
                     //   });
                        const progress = document.querySelector('.progress-done');
    progress.setAttribute(""data-done"" , ""0"");

                        const progress1 = document.querySelector('.progress');
                        progress1.style.display = """";
                        Download(false);
                       Loading(false);
                       OtherRowUpload(true);
                        $(""#_upload"").click();
                  
                    }
                    </script>
                <script>
                    grecaptcha.ready(function() {
                        grecaptcha.execute('");
#nullable restore
#line 436 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
                                       Write(GoogleCaptchaConfig.Value.Google_SiteKey);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', { action: 'submit' }).then(function(token) {
                            document.getElementById(""cpth"").value = token;
                        });
                    });
                </script>

                <script>
                    // rating page
                    const ratingStars = [...document.getElementsByClassName(""rating__star"")];

                    function executeRating(stars) {
                        const starClassActive = ""rating__star bi bi-star-fill"";
                        const starClassInactive = ""rating__star bi bi-star"";
                        const starsLength = stars.length;
                        let i;
                        stars.map((star) => {
                            star.onclick = () => {
                                i = stars.indexOf(star);

                                if (star.className === starClassInactive) {
                                    for (i; i >= 0; --i) stars[i].className = starClassActive;
                                } else {
  ");
                WriteLiteral(@"                                  for (i; i < starsLength; ++i) stars[i].className = starClassInactive;
                                }
                            };
                        });
                    }
                    executeRating(ratingStars);


                </script>

                <script>
                    var FileName = """";
                    var Id = """";

                    function Loading(State) {
                        try {
                            if (State == true) {
                                document.getElementById(""btnUpdateFiles"").click();
                                document.getElementById(""_Loading"").style.display = ""unset"";
                            }
                            else {
                                document.getElementById(""_Loading"").style.display = ""none"";
                            }
                        }
                        catch { }
                    }

                    function SelectFile(State) {
          ");
                WriteLiteral(@"              if (State == true) {
                            document.getElementById(""triggerFile"").setAttribute('onclick', 'selectttt()');
                            document.getElementById(""headertriggerFile"").style.cursor = ""pointer"";
                        }
                        else {
                            document.getElementById(""triggerFile"").setAttribute('onclick', '');
                            document.getElementById(""headertriggerFile"").style.cursor = ""wait"";
                            var old_element = document.getElementById(""triggerFile"");
                            var new_element = old_element.cloneNode(true);
                            old_element.parentNode.replaceChild(new_element, old_element);

                        }
                    }

                    function Download(State, OutFile, Id) {
                        if (State == true) {
                            document.getElementById(""_Download"").style.display = ""inherit"";
                            documen");
                WriteLiteral(@"t.getElementById(""btnDownload"").href = ""/Downloader/DownloadFile?OutFileName="" + OutFile + ""&Id="" + Id + ""&LogService="" + document.getElementById(""_BaseService"").textContent + """";
                            document.getElementById(""btnDownloadLink"").href = ""/download-link?OutFileName="" + OutFile + ""&Id="" + Id + ""&LogService="" + document.getElementById(""_BaseService"").textContent + """";
                        }
                        else {
                            document.getElementById(""_Download"").style.display = ""none"";
                            document.getElementById(""btnDownload"").href = ""#"";
                            document.getElementById(""btnDownloadLink"").href = ""#"";
                        }
                    }

                    function OtherRowUpload(State) {
        if (State == false) {
            document.getElementById(""drop"").style.display = ""none"";
        }
                    }

                    function TryConvert(State, FileName, Ip) {
                        if (Sta");
                WriteLiteral(@"te == true) {
                            document.getElementById(""btnTryConvert"").style.visibility = ""visible"";
                        }
                        else {
                            document.getElementById(""btnTryConvert"").style.visibility = ""hidden"";
                        }
                    }

   async function SendData() {
    var File = document.getElementById(""_upload"");
    var Filter = /(\.pdf|\.)$/i;
    if (!Filter.exec(File.value)) {
        swal.fire
            (
                ""warning"",
                ""File Format Invalid"",
                ""warning""
            );
        return;
    }
    var formData = new FormData();
    formData.append(""file"", File.files[0]);
    formData.append(""Service"", document.getElementById(""FileFormatService"").innerHTML);
    formData.append(""Recaptcha"", document.getElementById(""cpth"").value);

    Loading(true);
    SelectFile(false);
    Download(false);
    OtherRowUpload(false);

    var ajax = new XMLHttpRequest();
    ajax.upload.addEventLi");
                WriteLiteral(@"stener(""progress"", progressHandler, false);
    ajax.addEventListener(""load"", completeHandler, false);
    ajax.addEventListener(""error"", errorHandler, false);
    ajax.addEventListener(""abort"", abortHandler, false);
    ajax.open(""POST"", ""/ConvertFromPdf/PdfToImageUpload/"");
    ajax.send(formData);
        
}

function progressHandler(event) {
    var loaded = new Number((event.loaded / 1048576));//Make loaded a ""number"" and divide bytes to get Megabytes
    var total = new Number((event.total / 1048576));//Make total file size a ""number"" and divide bytes to get Megabytes
    $(""#uploaded_progress"").innerHTML = ""Uploaded <b>"" + loaded.toPrecision(5) + ""</b> Megabytes of "" + total.toPrecision(5);//String output
    var percent = (event.loaded / event.total) * 100;//Get percentage of upload progress
    // $(""#progressBar"").innerHTML = Math.round(percent);//Round value to solid
    const progress = document.querySelector('.progress-done');
    progress.setAttribute(""data-done"" ,  Math.round(percent))
    prog");
                WriteLiteral(@"ress.style.width = progress.getAttribute('data-done') + '%';
    Loading(true)
    $(""#status"").innerHTML = Math.round(percent) + ""% uploaded"";//String output
}
function completeHandler(event) {
    Loading(false);
    SelectFile(true);
    const obj_upload_serv = JSON.parse(event.target.responseText)
    const progress = document.querySelector('.progress');
    if(obj_upload_serv.success){
        $(""#status"").innerHTML = ""Complate !"";
        progress.style.display = ""none""
        Download(true, obj_upload_serv.enything.outFileName, obj_upload_serv.enything.id);
                FileName = obj_upload_serv.enything.outFileName;
                Id = obj_upload_serv.enything.id;
    } 
    else if (obj_upload_serv.enything == null) {
                OtherRowUpload(true);
                swal.fire(
                    ""warning"",
                    obj_upload_serv.message,
                    ""warning""
                );
            }
    else {
                OtherRowUpload(true);
                //TryConvert");
                WriteLiteral(@"(true, data.enything.filename, data.enything.userip);
                swal.fire(
                    ""warning"",
                    obj_upload_serv.message,
                    ""warning""
                );
    }
}
function errorHandler(event) {
    $(""#status"").innerHTML = ""Upload Failed"";//Switch status to upload failed
}
function abortHandler(event) {
    $(""#status"").innerHTML = ""Upload Aborted"";//Switch status to aborted
}

                    async function SubmitEmail() {
                        var Data = new FormData();
                        Data.append(""FId"", Id);
                        Data.append(""OutFileName"", FileName);
                        Data.append(""UserEmail"", document.getElementById('UserEmail').value);

                        await fetch('/ConvertFromPdf/SendFileToEmail/', {
                            method: ""POST"",
                            body: Data
                        })
                            .then(response => response.json())
                            .then((dat");
                WriteLiteral(@"a) => {
                                if (data.success) {
                                    swal.fire(
                                        ""success"",
                                        data.message,
                                        ""success""
                                    );
                                }
                                else {
                                    swal.fire(
                                        ""warning"",
                                        data.message,
                                        ""warning""
                                    );
                                }
                            })
                    }

                    async function SendMessage() {

                        var Data = new FormData();
                        Data.append(""UserEmail"", document.getElementById(""Emailaddress"").value);
                        Data.append(""UserName"", document.getElementById(""FullName"").value);
                        Data.");
                WriteLiteral(@"append(""Message"", document.getElementById(""Message"").value);
                        Data.append(""Service"", document.getElementById(""_Service"").innerHTML);
                        Data.append(""Recaptcha"", document.getElementById(""cpth"").value);

                        var rate = document.getElementsByClassName(""rating__star bi bi-star-fill"").length;
                        if (rate == 0) { rate = null; }
                        Data.append(""Rate"", rate);

                        await fetch('/ConvertFromPdf/UserMessage/', {
                            method: ""POST"",
                            body: Data
                        })
                            .then(response => response.json())
                            .then((data) => {
                                if (data.success) {
                                    document.getElementById(""Emailaddress"").value = """";
                                    document.getElementById(""FullName"").value = """";
                                    swal.fire(
   ");
                WriteLiteral(@"                                     ""success"",
                                        data.message,
                                        ""success""
                                    );
                                }
                                else {
                                    swal.fire(
                                        ""warning"",
                                        data.message,
                                        ""warning""
                                    );
                                }
                            })
                    }


                    

                    function SetFormat(Format, Service) {
                        document.getElementById(""btnFileFormat"").innerHTML = Format;
                        document.getElementById(""FileFormatService"").innerHTML = Service;
                    }

                    function CancelProcess() {
                        location.reload();
                    }

                </script>
");
            }
            );
#nullable restore
#line 690 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
  
    string basic = Domain.Entities.Features.ConvertFromPdf.PdfToJpg + ".json";
    string SchemaFile = Common.Formating.StandardFaqSchemaFileName + basic;
    string SchemaHowToFile = Common.Formating.StandardHowToSchemaFileName + basic;
    string SchemaVideoFile = Common.Formating.StandardVideoSchemaFileName + basic;

#line default
#line hidden
#nullable disable
            DefineSection("Schemas", async() => {
                WriteLiteral("\n                    <script type=\"application/ld+json\">\n        ");
#nullable restore
#line 698 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
   Write(Html.Raw(Common.Schema.SchemaReader.ReadToEnd(SchemaFile,true,Common.Schema.SchemaType.Faq)));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n        ");
#nullable restore
#line 699 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
   Write(Html.Raw(Common.Schema.SchemaReader.ReadToEnd(SchemaHowToFile,true,Common.Schema.SchemaType.HowTo)));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n        ");
#nullable restore
#line 700 "S:\navid\PdfConverter\EndPoint\Views\ConvertFromPdf\PdfToImages.cshtml"
   Write(Html.Raw(Common.Schema.SchemaReader.ReadToEnd(SchemaVideoFile,true,Common.Schema.SchemaType.Video)));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n                        </script>\n");
            }
            );
            DefineSection("Modals", async() => {
                WriteLiteral(@"
                <!-- Modal Add Email -->
                <div class=""modal fade"" id=""AddEmail"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalCenterTitle"" aria-hidden=""true"">
                    <div class=""modal-dialog modal-dialog-centered"" role=""document"">
                        <div class=""modal-content"">
                            <div class=""modal-header"">
                                <p class=""modal-title"" id=""exampleModalLongTitle"">Send To Email</p>
                                <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
                            </div>
                            <div class=""modal-body"">
                                <div class=""col-xl-12 col-lg-12 col-md-12 mb-1"">
                                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f9c46bf2db3e9c4a7e524d31c9cf142cd58bbfaee4b8606bc2a19c2e0227fb8880268", async() => {
                    WriteLiteral(@"
                                        <fieldset class=""form-group"">
                                            <input type=""text"" class=""form-control"" id=""OutName"" style=""visibility:hidden"">
                                            <label for=""basicInput"">YourEmail</label>
                                            <input type=""email"" class=""form-control"" id=""UserEmail"" placeholder=""PdfConverter@example.com"" required>
                                            <input type=""text"" class=""form-control"" id=""FId"" style=""visibility:hidden"">
                                        </fieldset>
                                    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                                </div>
                            </div>
                            <div class=""modal-footer"">
                                <a class=""btn btn-secondary"" data-bs-dismiss=""modal"">Cancel</a>
                                <a class=""btn btn-primary"" data-bs-dismiss=""modal"" onclick=""SubmitEmail()"">Submit</a>
                            </div>
                        </div>
                    </div>
                </div>
");
            }
            );
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public Microsoft.Extensions.Options.IOptions<EndPoint.Models.GoogleCaptchaConfigModel> GoogleCaptchaConfig { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Common.ResultMessage<Application.Services.Query.ReturnFeatureDetails.ResultReturnFeatureDetailsDto>> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
