#pragma checksum "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "666df816dd450d0c73befd641b433609881db2cf"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ConvertToPdf_ExcelToPdf), @"mvc.1.0.view", @"/Views/ConvertToPdf/ExcelToPdf.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\_ViewImports.cshtml"
using EndPoint;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\_ViewImports.cshtml"
using EndPoint.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"666df816dd450d0c73befd641b433609881db2cf", @"/Views/ConvertToPdf/ExcelToPdf.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d3cd8e7a4273f1e7f88356e8b76b3e7d2eb06234", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_ConvertToPdf_ExcelToPdf : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Common.ResultMessage<Application.Services.Query.ReturnFeatureDetails.ResultReturnFeatureDetailsDto>>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/loading.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/Content.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Sweetalert2/sweetalert2.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("width", new global::Microsoft.AspNetCore.Html.HtmlString("25"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/pdftoconverter-reset.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("cursor:pointer"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/uploadfile-convert.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/bootstrap.bundle.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Sweetalert2/sweetalert2.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("Details"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
  
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\n");
            DefineSection("Header", async() => {
                WriteLiteral("\n        <meta charset=\"utf-8\">\n        <link rel=\"canonical\"");
                BeginWriteAttribute("href", " href=\"", 345, "\"", 398, 2);
#nullable restore
#line 9 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
WriteAttributeValue("", 352, Common.GetPath.GetDomainHttps(), 352, 32, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 384, "/excel-to-pdf/", 384, 14, true);
                EndWriteAttribute();
                WriteLiteral(" />\n    ");
#nullable restore
#line 10 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
Write(await Component.InvokeAsync("GetMetaTags", "ExcelToPdf"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "666df816dd450d0c73befd641b433609881db2cf8914", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "666df816dd450d0c73befd641b433609881db2cf10094", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "666df816dd450d0c73befd641b433609881db2cf11275", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
            <style>
            .upload .upload-files .body p b,
            .upload .upload-files .body p a {
                color: #38ce2d !important;
            }

            .upload .upload-files footer .importar,
            .upload .upload-files footer .upload-btn {
                color: #fff !important;
                background-color: #38ce2d !important;
            }

            .upload .upload-files footer .divider {
                border-top: solid 4px #38ce2d;
            }

            .upload .upload-files header {
                background: #38ce2d !important;
            }

            .upload .upload-files footer .list-files .file .progress {
                background: linear-gradient(to left, #ffc92860, #38ce2d) no-repeat;
            }

            .upload .upload-files footer .list-files .file .done {
                background: #38ce2d
            }
        </style>

        <script src=""https://www.google.com/recaptcha/api.js?hl=en""></script>
");
            }
            );
            WriteLiteral(@"<br />
<br />

<!-- start main -->
<main>
    <div class=""container"">
        <!-- start home main -->
        <div class=""home-main text-center"">

            <!-- start file upload box -->
            <div class=""section main-file-upload-box"">
                <div class=""row align-items-center text-center"">
                    <div class=""col-12"">
                        <div class=""file-upload-box-header d-flex text-center align-items-center justify-content-center w-100 mt-5"">
                            <svg style=""width:34px;height:34px"" viewBox=""0 0 24 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""><path d=""M0 4C0 1.79086 1.79086 0 4 0H20C22.2091 0 24 1.79086 24 4V20C24 22.2091 22.2091 24 20 24H4C1.79086 24 0 22.2091 0 20V4Z"" fill=""#00CC44""></path><rect x=""5.5"" y=""5.5"" width=""8"" height=""10"" stroke=""white""></rect><path d=""M7.5 9.5H11.5V13.5H7.5V9.5Z"" stroke=""white""></path><path d=""M7.5 11.5H11.5"" stroke=""white""></path><path d=""M9.5 9.5V13.5"" stroke=""white""></path><path d=""M14 8.5H18.5V18.5001H10.5V15");
            WriteLiteral(".5001\" stroke=\"white\"></path></svg>\n                            <h1 class=\"h3 ms-3\">Convert EXCEL To PDF</h1>\n                        </div>\n                         <p>");
#nullable restore
#line 62 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                       Write(Model.Enything.FirstParagraph);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\n                         <p>");
#nullable restore
#line 63 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                       Write(Model.Enything.SecendParagraph);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</p>
                    </div>

                    <!-- upload file box -->
                    <div class=""col-12"">
                        <div class=""upload"">
                            <div class=""upload-files"">
                                <a onclick=""select()"" id=""triggerFile"">
                                    <header style=""cursor:pointer"" id=""headertriggerFile"">
                                        <p>
                                            <i class=""fa fa-cloud-upload"" aria-hidden=""true""></i>
                                            <span class=""up bi bi-cloud-arrow-up"">Choose</span>
                                            <span class=""load"">File</span>
                                        </p>
                                    </header>
                                </a>
                                <i id=""_Service"" style=""display:none"">");
#nullable restore
#line 79 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                                 Write(Domain.Entities.Features.ConverterToPdf.ExcelToPdf);

#line default
#line hidden
#nullable disable
            WriteLiteral("</i>\n                                <i id=\"_BaseService\" style=\"display:none\">");
#nullable restore
#line 80 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                                     Write(Domain.Entities.Logs.AllServicesLog.ConverterLog);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</i>

                                <div class=""body"" id=""drop"">
                                    <i class=""fa fa-file-text-o pointer-none"" aria-hidden=""true""></i>

                                    <p class=""pointer-none""> Or Upload From </p>
                                    <input type=""file"" id=""_upload"" multiple=""multiple"" />

                                    <!-- upload from -->
                                    <div class=""upload-other-location"">
                                        <div class=""other-location-circle google-drive""><a href=""/GoogleDrive/auth"" data-bs-toggle=""tooltip"" data-bs-placement=""top"" title=""Google Drive""></a></div>
                                        <div class=""other-location-circle drop-box""><a href=""#"" data-bs-toggle=""tooltip"" data-bs-placement=""top"" title=""DropBox""></a></div>
                                    </div>
                                </div>

                                <footer>
                                    <div class=""divider"">
 ");
            WriteLiteral(@"                                       <span><AR>FILE</AR></span>
                                    </div>
                                    <div class=""list-files"">
                                        <!--   template   -->
                                    </div>
                                    <div>
                                        <button onclick=""SendData()"" class=""up-convert-btn upload-btn btn visually-hidden"" data-bs-toggle=""modal"" data-bs-target=""#youremailmodal"">
                                            <span class=""btn-text"">Upload and Convert</span>
                                        </button>

                                        <button id=""btnUpdateFiles"" class=""importar btn"" title=""Reset"">");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "666df816dd450d0c73befd641b433609881db2cf18794", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"</button>

                                        <div class=""btn-sniper btn"">
                                            <span class=""spinner-border spinner-border-sm"" role=""status"" aria-hidden=""true""></span>
                                        </div>
                                        
                                    </div>
                                </footer>
                                <footer>
                                    <button id=""btnTryConvert"" class=""importar btn"" style=""display:none"">Try Again</button>
                                </footer>

                                <!--Loading part-->
                                <div id=""_Loading"" style=""display:none"">
                                    <svg class=""w-0"">
                                        <defs>
                                            <filter id=""w-0"">
                                                <feGaussianBlur in=""SourceGraphic"" stdDeviation=""7"" result=""blur"" />
                          ");
            WriteLiteral(@"                      <feColorMatrix in=""blur""
                                                               mode=""matrix""
                                                               values=""1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 20 -10""
                                                               result=""res"" />
                                                <feComposite in=""SourceGraphic"" in2=""res"" operator=""atop"" />
                                            </filter>
                                        </defs>
                                    </svg>

                                    <svg class=""f-w-0"" width=""200"" height=""200"" viewBox=""0 0 200 200"">
                                        <defs>
                                            <linearGradient id=""linear-gradient"">
                                                <stop class=""stop1"" offset=""0"" />
                                                <stop class=""stop2"" offset=""1"" />
                                            </linearGra");
            WriteLiteral(@"dient>
                                            <linearGradient y2=""160""
                                                            x2=""160""
                                                            y1=""40""
                                                            x1=""40""
                                                            gradientUnits=""userSpaceOnUse""
                                                            id=""gradient""
                                                            xlink:href=""#linear-gradient"" />
                                        </defs>

                                        <path class=""path-class""
                                              d=""m 164,100 c 0,-35.346224 -28.65378,-64 -64,-64 -35.346224,0 -64,28.653776
           -64,64 0,35.34622 28.653776,64 64,64 35.34622,0 64,-26.21502 64,-64
           0,-37.784981 -26.92058,-64 -64,-64 -37.079421,0 -65.267479,26.922736
           -64,64 1.267479,37.07726 26.703171,65.05317 64,64 37.29683,-1.05317
          ");
            WriteLiteral(@" 64,-64 64,-64"" />
                                        <circle class=""cricle-class"" cx=""100"" cy=""100"" r=""64"" />

                                    </svg>
                                    <p>Processing...</p>
                                    <a onclick=""CancelProcess()"" class=""btn btn-outline-primary mt-4"">Cancel</a>

                                </div>

                                <!-- download part -->
                                <div class=""dropdown"" id=""_Download"" style=""display:none"">
                                    <p>File SuccessFully Converted</p>
                                    <button");
            BeginWriteAttribute("style", " style=\"", 9559, "\"", 9567, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""btn btn-primary btn-lg dropdown-toggle px-5"" type=""button"" id=""dropdownMenuButton1"" data-bs-toggle=""dropdown"" aria-expanded=""false"">
                                        Download
                                    </button>
                                    <ul class=""dropdown-menu"" aria-labelledby=""dropdownMenuButton1"">
                                        <li><a class=""dropdown-item"" href=""#"" id=""btnDownload""> <i class=""bi bi-hdd-fill"" style=""font-size: 1rem; color: crimson;""></i> Download</a></li>
                                        <li><hr class=""dropdown-divider""></li>
                                        <li><a class=""dropdown-item"" href=""#""> <i class=""bi bi-google"" style=""font-size: 1rem; color: cornflowerblue;""></i> Send To GoogleDrive</a></li>
                                        <li><hr class=""dropdown-divider""></li>
                                        <li><a class=""dropdown-item"" href=""#""> <i class=""bi bi-box2-heart-fill"" style=""font-size: 1rem; color: cornflowerblue;");
            WriteLiteral(@"""></i> Send To DropBox</a></li><!-- or this bi bi-archive-fill -->
                                        <li><hr class=""dropdown-divider""></li>
                                        <li><a class=""dropdown-item"" data-bs-toggle=""modal"" href=""#AddEmail""> <i class=""bi bi-envelope-paper-heart-fill"" style=""font-size: 1rem; color: crimson;""></i> Send To Your Email</a></li>
                                        <li><hr class=""dropdown-divider""></li>
                                        <li><a class=""dropdown-item"" target=""_blank"" href=""#"" id=""btnDownloadLink""> <i class=""bi bi-envelope-paper-heart-fill"" style=""font-size: 1rem; color: crimson;""></i> Download Link</a></li>
                                    </ul>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- end file upload box -->
            <!-- start how work tools -->
            <div class=""section main-how-wor");
            WriteLiteral(@"k-tools-box"">
                <div class=""row justify-content-center text-center"">


                    <div class=""col-12 mb-5"">

                        <h2>How To Convert Excel To Pdf Online for Free</h2>
                        <p>You are only 3 steps away from converting the file excel to pdf</p>
                    </div>

                    <div class=""main-how-work-tools-content"">
                        <div class=""row align-items-center text-center"">

                            <!-- how work tools step 1 -->
                            <div class=""col-12 col-lg-4"">
                                <div class=""work-tools-step-card"">
                                    <div class=""step-card-counter"">
                                        <div class=""counter rounded-circle"">1</div>
                                    </div>

");
#nullable restore
#line 209 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                     if (ViewBag.ThreeStepHelp.Success)
                                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <div class=\"step-card-body\">\n                                            ");
#nullable restore
#line 212 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                       Write(ViewBag.ThreeStepHelp.Enything.Step1);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                                            </div>\n");
#nullable restore
#line 214 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                    }
                                    else
                                    {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                            <div class=""step-card-body"">
                                                By clicking on the large box above, you can select the desired file from the files in your system, and it is acceptable if the file has the correct format
                                            </div>
");
#nullable restore
#line 220 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                </div>
                            </div>

                            <!-- how work tools step 2 -->
                            <div class=""col-12 col-lg-4"">
                                <div class=""work-tools-step-card"">
                                    <div class=""step-card-counter"">
                                        <div class=""counter rounded-circle"">2</div>
                                    </div>
                                    <div class=""step-card-body"">
");
#nullable restore
#line 231 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                         if (ViewBag.ThreeStepHelp.Success)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                <div class=\"step-card-body\">\n                                                ");
#nullable restore
#line 234 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                           Write(ViewBag.ThreeStepHelp.Enything.Step2);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                                                </div>\n");
#nullable restore
#line 236 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                        }
                                        else
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                                <div class=""step-card-body"">
                                                    Using the buttons below the large box, you can upload the file to start the process or go back to the previous step to change the file
                                                </div>
");
#nullable restore
#line 242 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                    </div>
                                </div>
                            </div>

                            <!-- how work tools step 3 -->
                            <div class=""col-12 col-lg-4"">
                                <div class=""work-tools-step-card"">
                                    <div class=""step-card-counter"">
                                        <div class=""counter rounded-circle"">3</div>
                                    </div>
                                    <div class=""step-card-body"">

");
#nullable restore
#line 255 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                         if (ViewBag.ThreeStepHelp.Success)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                <div class=\"step-card-body\">\n                                                ");
#nullable restore
#line 258 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                           Write(ViewBag.ThreeStepHelp.Enything.Step3);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                                                </div>\n");
#nullable restore
#line 260 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                        }
                                        else
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                                <div class=""step-card-body"">
                                                    Processing does not take much time. After a few minutes, you can download the output file in 4 ways
                                                </div>
");
#nullable restore
#line 266 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n");
#nullable restore
#line 273 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                     if (ViewBag.ThreeStepHelp.Enything.VideoName != null)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                            <h3>Video tutorial on how to convert Excel to PDF</h3>\n                            <p>In this video, you will learn how to convert a Excel file to PDF in a few minutes</p>\n");
#nullable restore
#line 277 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                            string posterName = "How-to-Convert-Excel-To-Pdf-Online-for-Free-in-a-few-minutes.jpg";

#line default
#line hidden
#nullable disable
            WriteLiteral("                            <video");
            BeginWriteAttribute("poster", " poster=\"", 16584, "\"", 16669, 3);
#nullable restore
#line 278 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
WriteAttributeValue("", 16593, Common.GetPath.GetHelpVideoPath().Replace("wwwroot", ""), 16593, 57, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 16650, "/poster/", 16650, 8, true);
#nullable restore
#line 278 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
WriteAttributeValue("", 16658, posterName, 16658, 11, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" alt=\"Help Video\" title=\"Video tutorial on working with tools\"");
            BeginWriteAttribute("style", " style=\"", 16732, "\"", 16863, 9);
            WriteAttributeValue("", 16740, "width:", 16740, 6, true);
#nullable restore
#line 278 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
WriteAttributeValue(" ", 16746, Common.GetPath.GetVideoSize(), 16747, 30, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 16777, ";", 16777, 1, true);
            WriteAttributeValue(" ", 16778, "max-height:", 16779, 12, true);
#nullable restore
#line 278 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
WriteAttributeValue(" ", 16790, Common.GetPath.GetVideoSize(), 16791, 30, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 16821, ";", 16821, 1, true);
            WriteAttributeValue(" ", 16822, "position:center;", 16823, 17, true);
            WriteAttributeValue(" ", 16839, "background-color:", 16840, 18, true);
            WriteAttributeValue(" ", 16857, "#000;", 16858, 6, true);
            EndWriteAttribute();
            WriteLiteral(" controls>\n");
#nullable restore
#line 279 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                             foreach (var item in Common.Formating.VideosFormat)
                            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                        <source");
            BeginWriteAttribute("src", " src=\"", 17033, "\"", 17138, 3);
#nullable restore
#line 281 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
WriteAttributeValue("", 17039, Common.GetPath.GetHelpVideoPath().Replace("wwwroot", ""), 17039, 57, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 17096, "/", 17096, 1, true);
#nullable restore
#line 281 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
WriteAttributeValue("", 17097, ViewBag.ThreeStepHelp.Enything.VideoName, 17097, 41, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            BeginWriteAttribute("type", " type=\"", 17139, "\"", 17157, 2);
            WriteAttributeValue("", 17146, "video/", 17146, 6, true);
#nullable restore
#line 281 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
WriteAttributeValue("", 17152, item, 17152, 5, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\n");
#nullable restore
#line 282 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                            }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                Your browser does not support the video display\n                            </video>\n");
#nullable restore
#line 285 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </div>\n            </div>\n            <!-- end how work tools -->\n\n            <!-- start other content -->\n            ");
#nullable restore
#line 291 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
       Write(await Component.InvokeAsync("GetAdditionalHelp",Domain.Entities.Features.ConverterToPdf.ExcelToPdf));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            <!-- end other content -->\n\n            <!-- start section main services info box -->\n            ");
#nullable restore
#line 295 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
       Write(await Component.InvokeAsync("GetHelpContext",Model));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            <!-- end section main services info box -->\n\n             <!--start blog posts slides-->\n            ");
#nullable restore
#line 299 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
       Write(await Component.InvokeAsync("GetBlogPosts", @Domain.Entities.Features.ConverterToPdf.ExcelToPdf));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            <!--end blog posts slides-->\n            <!-- end section main services info box -->\n            ");
#nullable restore
#line 302 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
       Write(await Component.InvokeAsync("GetTools"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            ");
#nullable restore
#line 303 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
       Write(await Component.InvokeAsync("GetFAQ",ViewBag.FAQ));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
            <!-- start sectin main people say about us -->
            <div class=""section main-people-say-about-us"">
                <div class=""row justify-content-center text-center"">
                    <div class=""col-7"">
                        <h3>The Best Online Excel to PDF Converter</h3>
                        <h4>Some User Comments</h4>
                    </div>

                    <div class=""main-people-saying-content"">
                        <div class=""row justify-content-center text-center"">
                            <div class=""col-7"">
                                <div id=""carouselExampleIndicators"" class=""carousel carousel-dark slide"" data-bs-ride=""carousel"">
                                    <div class=""carousel-indicators"">
");
#nullable restore
#line 317 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                         if (ViewBag.Comments.Success)
                                        {
                                            int cvv = 0;
                                            

#line default
#line hidden
#nullable disable
#nullable restore
#line 320 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                             for (int i = 1; i <= ViewBag.Comments.Enything.Count; i++)
                                            {

                                                if (cvv == 0)
                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"");
#nullable restore
#line 325 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                                                                                                               Write(cvv);

#line default
#line hidden
#nullable disable
            WriteLiteral("\" class=\"active\" aria-current=\"true\"");
            BeginWriteAttribute("aria-label", " aria-label=\"", 19539, "\"", 19560, 2);
            WriteAttributeValue("", 19552, "Slide", 19552, 5, true);
#nullable restore
#line 325 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
WriteAttributeValue(" ", 19557, i, 19558, 2, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral("></button>\n");
#nullable restore
#line 326 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                }
                                                else
                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"");
#nullable restore
#line 329 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                                                                                                               Write(cvv);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"");
            BeginWriteAttribute("aria-label", " aria-label=\"", 19878, "\"", 19899, 2);
            WriteAttributeValue("", 19891, "Slide", 19891, 5, true);
#nullable restore
#line 329 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
WriteAttributeValue(" ", 19896, i, 19897, 2, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral("></button>\n");
#nullable restore
#line 330 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                }
                                                cvv += 1;
                                            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 332 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                             
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </div>\n\n                                    <div class=\"carousel-inner\">\n");
#nullable restore
#line 337 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                         if (ViewBag.Comments.Success)
                                        {
                                            int cv = 1;
                                            string classname = "";
                                            

#line default
#line hidden
#nullable disable
#nullable restore
#line 341 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                             foreach (var item in ViewBag.Comments.Enything)
                                            {
                                                classname = cv == 1 ? "carousel-item active" : "carousel-item";

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                        <div");
            BeginWriteAttribute("class", " class=\"", 20763, "\"", 20781, 1);
#nullable restore
#line 344 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
WriteAttributeValue("", 20771, classname, 20771, 10, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\n");
#nullable restore
#line 345 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                      
                                                        cv = 0;
                                                    

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                            <div class=\"people-saying-card\">\n                                                                <h5 class=\"person-fullname\">");
#nullable restore
#line 349 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                                                       Write(item.UserName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h5>\n                                                                <div class=\"person-rate\">\n");
#nullable restore
#line 351 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                             for (int i = 1; i <= 5; i++)
                                                            {
                                                                

#line default
#line hidden
#nullable disable
#nullable restore
#line 353 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                                 if (item.Rate + 1 > i)
                                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                                    <i class=\"bi bi-star-fill\" data-rating=\"");
#nullable restore
#line 355 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                                                                                       Write(i);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"></i>\n");
#nullable restore
#line 356 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                                }
                                                                else
                                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                                    <i class=\"bi bi-star\" data-rating=\"");
#nullable restore
#line 359 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                                                                                  Write(i);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"></i>\n");
#nullable restore
#line 360 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 360 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                                 
                                                            }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                </div>\n                                                                <p>");
#nullable restore
#line 363 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                                              Write(item.Message);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\n                                                            </div>\n                                                        </div>\n");
#nullable restore
#line 366 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 366 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                                             
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- end sectin main people say about us -->
        </div>
        <!-- end home main -->
    </div>
</main>
<!-- end main -->
<!-- start rate this page -->
");
#nullable restore
#line 382 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
Write(await Component.InvokeAsync("GetRatingPart"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n<!-- end rate this page -->\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\n    <!-- script -->\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "666df816dd450d0c73befd641b433609881db2cf50966", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "666df816dd450d0c73befd641b433609881db2cf52064", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "666df816dd450d0c73befd641b433609881db2cf53162", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "666df816dd450d0c73befd641b433609881db2cf54260", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\n    <script");
                BeginWriteAttribute("src", " src=\"", 23443, "\"", 23537, 2);
                WriteAttributeValue("", 23449, "https://www.google.com/recaptcha/api.js?render=", 23449, 47, true);
#nullable restore
#line 393 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
WriteAttributeValue("", 23496, GoogleCaptchaConfig.Value.Google_SiteKey, 23496, 41, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral("></script>\n\n    <script>\n        grecaptcha.ready(function () {\n            grecaptcha.execute(\'");
#nullable restore
#line 397 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                           Write(GoogleCaptchaConfig.Value.Google_SiteKey);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', { action: 'submit' }).then(function (token) {
                document.getElementById(""cpth"").value = token;
            });
        });
    </script>

    <script>
        // rating page
        const ratingStars = [...document.getElementsByClassName(""rating__star"")];

        function executeRating(stars) {
            const starClassActive = ""rating__star bi bi-star-fill"";
            const starClassInactive = ""rating__star bi bi-star"";
            const starsLength = stars.length;
            let i;
            stars.map((star) => {
                star.onclick = () => {
                    i = stars.indexOf(star);

                    if (star.className === starClassInactive) {
                        for (i; i >= 0; --i) stars[i].className = starClassActive;
                    } else {
                        for (i; i < starsLength; ++i) stars[i].className = starClassInactive;
                    }
                };
            });
        }
        executeRating(ratingStars);

    </script>

    ");
                WriteLiteral(@"<script>
        var FileName = """";
        var Id = """";

        function Loading(State) {
            try {
                if (State == true) {
                    document.getElementById(""btnUpdateFiles"").click();
                    document.getElementById(""_Loading"").style.display = ""unset"";
                }
                else {
                    document.getElementById(""_Loading"").style.display = ""none"";
                }
            }
            catch { }
        }

        function SelectFile(State) {
            if (State == true) {
                document.getElementById(""triggerFile"").setAttribute('onclick', 'select()');
                document.getElementById(""headertriggerFile"").style.cursor = ""pointer"";
            }
            else {
                document.getElementById(""triggerFile"").setAttribute('onclick', '');
                document.getElementById(""headertriggerFile"").style.cursor = ""wait"";
                var old_element = document.getElementById(""triggerFile"");
               ");
                WriteLiteral(@" var new_element = old_element.cloneNode(true);
                old_element.parentNode.replaceChild(new_element, old_element);

            }
        }

        function Download(State, OutFile, Id) {
            if (State == true) {
                document.getElementById(""_Download"").style.display = ""inherit"";
                document.getElementById(""btnDownload"").href = ""/Downloader/DownloadFile?OutFileName="" + OutFile + ""&Id="" + Id + ""&LogService="" + document.getElementById(""_BaseService"").textContent + """";
                document.getElementById(""btnDownloadLink"").href = ""/download-link?OutFileName="" + OutFile + ""&Id="" + Id + ""&LogService="" + document.getElementById(""_BaseService"").textContent + """";
            }
            else {
                document.getElementById(""_Download"").style.display = ""none"";
                document.getElementById(""btnDownload"").href = ""#"";
                document.getElementById(""btnDownloadLink"").href = ""#"";
            }
        }

        function OtherRowUpload(State");
                WriteLiteral(@") {
            if (State == true) {
                document.getElementById(""drop"").style.visibility = ""visible"";
            }
            else {
                document.getElementById(""drop"").style.visibility = ""hidden"";
            }
        }

        function TryConvert(State, FileName, Ip) {
            if (State == true) {
                document.getElementById(""btnTryConvert"").style.visibility = ""visible"";
            }
            else {
                document.getElementById(""btnTryConvert"").style.visibility = ""hidden"";
            }
        }

        async function SendData() {
            var File = document.getElementById(""_upload"");
            var Filter = /(\.xlsx|\.xls|\.)$/i;
            if (!Filter.exec(File.value)) {
                swal.fire
                    (
                        ""warning"",
                        ""File Format Invalid"",
                        ""warning""
                    );
                return;
            }
            var formData = new FormData();
    ");
                WriteLiteral(@"        formData.append(""file"", File.files[0]);
            formData.append(""Recaptcha"", document.getElementById(""cpth"").value);
            Loading(true);
            SelectFile(false);
            Download(false);
            OtherRowUpload(false);
            await fetch('/ConvertToPdf/ExcelToPdfUpload/', {
                method: ""POST"",
                body: formData
            })
                .then(response => response.json())
                .then((data) => {
                    Loading(false);
                    SelectFile(true);
                    if (data.success) {
                        Download(true, data.enything.outFileName, data.enything.id);
                        FileName = data.enything.outFileName;
                        Id = data.enything.id;
                    }
                    else {
                        OtherRowUpload(true);
                        swal.fire(
                            ""warning"",
                            data.message,
                            ""w");
                WriteLiteral(@"arning""
                        );
                    }
                })
        }

        async function SubmitEmail() {
            var Data = new FormData();
            Data.append(""FId"", Id);
            Data.append(""OutFileName"", FileName);
            Data.append(""UserEmail"", document.getElementById('UserEmail').value);

            await fetch('/ConvertToPdf/SendFileToEmail/', {
                method: ""POST"",
                body: Data
            })
                .then(response => response.json())
                .then((data) => {
                    if (data.success) {
                        swal.fire(
                            ""success"",
                            data.message,
                            ""success""
                        );
                    }
                    else {
                        swal.fire(
                            ""warning"",
                            data.message,
                            ""warning""
                        );
                    ");
                WriteLiteral(@"}
                })
        }

        async function SendMessage() {
            var Data = new FormData();
            Data.append(""UserEmail"", document.getElementById(""Emailaddress"").value);
            Data.append(""UserName"", document.getElementById(""FullName"").value);
            Data.append(""Message"", document.getElementById(""Message"").value);
            Data.append(""Recaptcha"", document.getElementById(""cpth"").value);
            Data.append(""Service"", document.getElementById(""_Service"").textContent);

            var rate = document.getElementsByClassName(""rating__star bi bi-star-fill"").length;
            if (rate == 0) { rate = null; }
            Data.append(""Rate"", rate);

            await fetch('/ConvertToPdf/UserMessage/', {
                method: ""POST"",
                body: Data
            })
                .then(response => response.json())
                .then((data) => {
                    if (data.success) {
                        document.getElementById(""Emailaddress"").value = """"");
                WriteLiteral(@";
                        document.getElementById(""FullName"").value = """";
                        swal.fire(
                            ""success"",
                            data.message,
                            ""success""
                        );
                    }
                    else {
                        swal.fire(
                            ""warning"",
                            data.message,
                            ""warning""
                        );
                    }
                })
        }

        function select() {
            grecaptcha.execute('");
#nullable restore
#line 601 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
                           Write(GoogleCaptchaConfig.Value.Google_SiteKey);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', { action: 'submit' }).then(function (token) {
                document.getElementById(""cpth"").value = token;
            });

            Download(false);
            Loading(false);
            OtherRowUpload(true);
            $(""#_upload"").click();
        }

        function CancelProcess() {
            location.reload();
        }

    </script>
");
            }
            );
#nullable restore
#line 617 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
  
        string basic = Domain.Entities.Features.ConverterToPdf.ExcelToPdf + ".json";
    string SchemaFile = Common.Formating.StandardFaqSchemaFileName + basic;
    string SchemaHowToFile = Common.Formating.StandardHowToSchemaFileName + basic;
    string SchemaVideoFile = Common.Formating.StandardVideoSchemaFileName + basic;

#line default
#line hidden
#nullable disable
            DefineSection("Schemas", async() => {
                WriteLiteral("\n                        <script type=\"application/ld+json\">\n        ");
#nullable restore
#line 625 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
   Write(Html.Raw(Common.Schema.SchemaReader.ReadToEnd(SchemaFile,true,Common.Schema.SchemaType.Faq)));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n        ");
#nullable restore
#line 626 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
   Write(Html.Raw(Common.Schema.SchemaReader.ReadToEnd(SchemaHowToFile,true,Common.Schema.SchemaType.HowTo)));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n        ");
#nullable restore
#line 627 "D:\C#\Web\Core\PdfConverter\EndPoint\Views\ConvertToPdf\ExcelToPdf.cshtml"
   Write(Html.Raw(Common.Schema.SchemaReader.ReadToEnd(SchemaVideoFile,true,Common.Schema.SchemaType.Video)));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n                            </script>\n");
            }
            );
            WriteLiteral("\n");
            DefineSection("Modals", async() => {
                WriteLiteral(@"
    <!-- Modal Add Email -->
    <div class=""modal fade"" id=""AddEmail"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalCenterTitle"" aria-hidden=""true"">
        <div class=""modal-dialog modal-dialog-centered"" role=""document"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <p class=""modal-title"" id=""exampleModalLongTitle"">Send To Email</p>
                    <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
                </div>
                <div class=""modal-body"">
                    <div class=""col-xl-12 col-lg-12 col-md-12 mb-1"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "666df816dd450d0c73befd641b433609881db2cf67769", async() => {
                    WriteLiteral(@"
                            <fieldset class=""form-group"">

                                <input type=""text"" class=""form-control"" id=""OutName"" style=""visibility:hidden"">
                                <label for=""basicInput"">YourEmail</label>
                                <input type=""email"" class=""form-control"" id=""UserEmail"" placeholder=""PdfConverter@example.com"" required>
                                <input type=""text"" class=""form-control"" id=""FId"" style=""visibility:hidden"">
                            </fieldset>
                        ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                    </div>
                </div>
                <div class=""modal-footer"">
                    <a class=""btn btn-secondary"" data-bs-dismiss=""modal"">Cancel</a>
                    <a class=""btn btn-primary"" data-bs-dismiss=""modal"" onclick=""SubmitEmail()"">Submit</a>
                </div>
            </div>
        </div>
    </div>
");
            }
            );
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public Microsoft.Extensions.Options.IOptions<EndPoint.Models.GoogleCaptchaConfigModel> GoogleCaptchaConfig { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Common.ResultMessage<Application.Services.Query.ReturnFeatureDetails.ResultReturnFeatureDetailsDto>> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
