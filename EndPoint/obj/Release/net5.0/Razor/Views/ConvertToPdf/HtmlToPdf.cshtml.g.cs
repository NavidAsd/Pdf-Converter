#pragma checksum "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "3432fb860562d8a284390df29ed7221ec32794bb48229d4c15338d3a76259382"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ConvertToPdf_HtmlToPdf), @"mvc.1.0.view", @"/Views/ConvertToPdf/HtmlToPdf.cshtml")]
namespace AspNetCore
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "S:\navid\PdfConverter\EndPoint\Views\_ViewImports.cshtml"
using EndPoint;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "S:\navid\PdfConverter\EndPoint\Views\_ViewImports.cshtml"
using EndPoint.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"3432fb860562d8a284390df29ed7221ec32794bb48229d4c15338d3a76259382", @"/Views/ConvertToPdf/HtmlToPdf.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"4359f7b64bc44f353b6ba2c74169ca926fe29f79fcf1cc193d694a5e6fd5976e", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_ConvertToPdf_HtmlToPdf : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Common.ResultMessage<Application.Services.Query.ReturnFeatureDetails.ResultReturnFeatureDetailsDto>>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/loading.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/Content.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Sweetalert2/sweetalert2.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/bootstrap.bundle.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Sweetalert2/sweetalert2.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("Details"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString("javascript:void(0);"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
  
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\n");
            DefineSection("Header", async() => {
                WriteLiteral("\n    <link rel=\"canonical\"");
                BeginWriteAttribute("href", " href=\"", 310, "\"", 362, 2);
#nullable restore
#line 8 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
WriteAttributeValue("", 317, Common.GetPath.GetDomainHttps(), 317, 32, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 349, "/html-to-pdf/", 349, 13, true);
                EndWriteAttribute();
                WriteLiteral(" />\n    ");
#nullable restore
#line 9 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
Write(await Component.InvokeAsync("GetMetaTags", "HtmlToPdf"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "3432fb860562d8a284390df29ed7221ec32794bb48229d4c15338d3a762593827884", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "3432fb860562d8a284390df29ed7221ec32794bb48229d4c15338d3a762593829084", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "3432fb860562d8a284390df29ed7221ec32794bb48229d4c15338d3a7625938210284", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
        <style>
        .upload .upload-files .body p b,
        .upload .upload-files .body p a {
            color: #FFCA28 !important;
        }

        .upload .upload-files footer .importar,
        .upload .upload-files footer .upload-btn {
            color: #fff !important;
            background-color: #FFCA28 !important;
        }

        .upload .upload-files footer .divider {
            border-top: solid 4px #d8aa20;
        }

        .upload .upload-files header {
            background: #FFCA28 !important;
        }

        .upload .upload-files footer .list-files .file .progress {
            background: linear-gradient(to left, #ffc92860, #FFCA28) no-repeat;
        }

        .upload .upload-files footer .list-files .file .done {
            background: #FFCA28
        }
    </style>

    <script src=""https://www.google.com/recaptcha/api.js?hl=en""></script>
");
            }
            );
            WriteLiteral(@"<br />
<br />

<!-- start main -->
<main>
    <div class=""container"">
        <!-- start home main -->
        <div class=""home-main text-center"">

            <!-- start file upload box -->
            <div class=""section main-file-upload-box"">
                <div class=""row align-items-center text-center"">
                    <div class=""col-12"">
                        <div class=""file-upload-box-header d-flex text-center align-items-center justify-content-center w-100 mt-5"">
                            <svg style=""width:34px;height:34px"" viewBox=""0 0 24 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""><path d=""M0 4C0 1.79086 1.79086 0 4 0H20C22.2091 0 24 1.79086 24 4V20C24 22.2091 22.2091 24 20 24H4C1.79086 24 0 22.2091 0 20V4Z"" fill=""#FFCA28""></path><rect x=""5.5"" y=""5.5"" width=""4"" height=""6"" stroke=""white""></rect><rect x=""14.5"" y=""12.5"" width=""4"" height=""6"" stroke=""white""></rect><path d=""M12 7.00014L11.6464 6.64658L11.2929 7.00014L11.6464 7.35369L12 7.00014ZM17 7H17.5V6.49999L17 6.5L17 7ZM13.9091 5.79");
            WriteLiteral(@"813L14.2627 5.44458L13.5556 4.73747L13.202 5.09103L13.9091 5.79813ZM13.202 8.90924L13.5556 9.2628L14.2627 8.55569L13.9091 8.20214L13.202 8.90924ZM12 7.50014L17 7.5L17 6.5L12 6.50014L12 7.50014ZM16.5 7V11H17.5V7H16.5ZM12.3536 7.35369L13.9091 5.79813L13.202 5.09103L11.6464 6.64658L12.3536 7.35369ZM11.6464 7.35369L13.202 8.90924L13.9091 8.20214L12.3536 6.64658L11.6464 7.35369Z"" fill=""white""></path><path d=""M12 17L12.3536 17.3536L12.7071 17L12.3536 16.6464L12 17ZM7 17L6.5 17L6.49999 17.5H7V17ZM10.0909 18.202L9.73734 18.5556L10.4444 19.2627L10.798 18.9091L10.0909 18.202ZM10.798 15.0909L10.4444 14.7373L9.73734 15.4444L10.0909 15.798L10.798 15.0909ZM12 16.5H7V17.5H12V16.5ZM7.5 17L7.50007 13L6.50007 13L6.5 17L7.5 17ZM11.6464 16.6464L10.0909 18.202L10.798 18.9091L12.3536 17.3536L11.6464 16.6464ZM12.3536 16.6464L10.798 15.0909L10.0909 15.798L11.6464 17.3536L12.3536 16.6464Z"" fill=""white""></path></svg>
                            <h1 class=""h3 ms-3"">Convert Html To PDF online & free</h1>
                        </div>
 ");
            WriteLiteral("                        <p>");
#nullable restore
#line 61 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                       Write(Model.Enything.FirstParagraph);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\n                         <p>");
#nullable restore
#line 62 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                       Write(Model.Enything.SecendParagraph);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</p>
                    </div>

                    <!-- upload file box -->
                    <div class=""col-12"">
                        <div class=""upload"">
                            <div class=""upload-files"">
                                <a onclick=""select()"" id=""triggerFile"">
                                    <header style=""cursor:pointer"" id=""headertriggerFile"">
                                        <p>
                                            <i class=""fa fa-cloud-upload"" aria-hidden=""true""></i>
                                            <span class=""up bi bi-link-45deg"">Enter Url</span>
                                        </p>
                                    </header>
                                </a>
                                <i id=""_Service"" style=""display:none"">");
#nullable restore
#line 77 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                                 Write(Domain.Entities.Features.ConverterToPdf.HtmlToPdf);

#line default
#line hidden
#nullable disable
            WriteLiteral("</i>\n                                <i id=\"_BaseService\" style=\"display:none\">");
#nullable restore
#line 78 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                                     Write(Domain.Entities.Logs.AllServicesLog.ConverterLog);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</i>
                                <br />

                                <!--Loading part-->
                                <div id=""_Loading"" style=""display:none"">
                                    <svg class=""w-0"">
                                        <defs>
                                            <filter id=""w-0"">
                                                <feGaussianBlur in=""SourceGraphic"" stdDeviation=""7"" result=""blur"" />
                                                <feColorMatrix in=""blur""
                                                               mode=""matrix""
                                                               values=""1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 20 -10""
                                                               result=""res"" />
                                                <feComposite in=""SourceGraphic"" in2=""res"" operator=""atop"" />
                                            </filter>
                                        </defs>
                   ");
            WriteLiteral(@"                 </svg>

                                    <svg class=""f-w-0"" width=""200"" height=""200"" viewBox=""0 0 200 200"">
                                        <defs>
                                            <linearGradient id=""linear-gradient"">
                                                <stop class=""stop1"" offset=""0"" />
                                                <stop class=""stop2"" offset=""1"" />
                                            </linearGradient>
                                            <linearGradient y2=""160""
                                                            x2=""160""
                                                            y1=""40""
                                                            x1=""40""
                                                            gradientUnits=""userSpaceOnUse""
                                                            id=""gradient""
                                                            xlink:href=""#linear-gradient"" />
         ");
            WriteLiteral(@"                               </defs>

                                        <path class=""path-class""
                                              d=""m 164,100 c 0,-35.346224 -28.65378,-64 -64,-64 -35.346224,0 -64,28.653776
           -64,64 0,35.34622 28.653776,64 64,64 35.34622,0 64,-26.21502 64,-64
           0,-37.784981 -26.92058,-64 -64,-64 -37.079421,0 -65.267479,26.922736
           -64,64 1.267479,37.07726 26.703171,65.05317 64,64 37.29683,-1.05317
           64,-64 64,-64"" />
                                        <circle class=""cricle-class"" cx=""100"" cy=""100"" r=""64"" />

                                    </svg>
                                    <p>Processing...</p>
                                    <p>It may take a few seconds</p>
                                    <a onclick=""CancelProcess()"" class=""btn btn-outline-primary mt-4"">Cancel</a>

                                </div>

                                <!-- download part -->
                                <div class=""dropdown""");
            WriteLiteral(" id=\"_Download\" style=\"display:none\">\n                                    <p>File SuccessFully Converted</p>\n                                    <button");
            BeginWriteAttribute("style", " style=\"", 7891, "\"", 7899, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""btn btn-primary btn-lg dropdown-toggle px-5"" type=""button"" id=""dropdownMenuButton1"" data-bs-toggle=""dropdown"" aria-expanded=""false"">
                                        Download
                                    </button>
                                    <ul class=""dropdown-menu"" aria-labelledby=""dropdownMenuButton1"">
                                        <li><a class=""dropdown-item"" href=""#"" id=""btnDownload""> <i class=""bi bi-hdd-fill"" style=""font-size: 1rem; color: crimson;""></i> Download</a></li>
                                        <li><hr class=""dropdown-divider""></li>
                                        <li><a class=""dropdown-item"" href=""#""> <i class=""bi bi-google"" style=""font-size: 1rem; color: cornflowerblue;""></i> Send To GoogleDrive</a></li>
                                        <li><hr class=""dropdown-divider""></li>
                                        <li><a class=""dropdown-item"" href=""#""> <i class=""bi bi-box2-heart-fill"" style=""font-size: 1rem; color: cornflowerblue;");
            WriteLiteral(@"""></i> Send To DropBox</a></li><!-- or this bi bi-archive-fill -->
                                        <li><hr class=""dropdown-divider""></li>
                                        <li><a class=""dropdown-item"" data-bs-toggle=""modal"" href=""#AddEmail""> <i class=""bi bi-envelope-paper-heart-fill"" style=""font-size: 1rem; color: crimson;""></i> Send To Your Email</a></li>
                                        <li><hr class=""dropdown-divider""></li>
                                        <li><a class=""dropdown-item"" target=""_blank"" href=""#"" id=""btnDownloadLink""> <i class=""bi bi-envelope-paper-heart-fill"" style=""font-size: 1rem; color: crimson;""></i> Download Link</a></li>
                                    </ul>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- end file upload box -->
            <!-- start how work tools -->
            <div class=""section main-how-wor");
            WriteLiteral(@"k-tools-box"">
                <div class=""row justify-content-center text-center"">


                    <div class=""col-12 mb-5"">

                        <h2>How To Convert Html To Pdf Online for Free</h2>
                        <p>You are only 3 steps away from converting the file html to pdf</p>
                    </div>

                    <div class=""main-how-work-tools-content"">
                        <div class=""row align-items-center text-center"">

                            <!-- how work tools step 1 -->
                            <div class=""col-12 col-lg-4"">
                                <div class=""work-tools-step-card"">
                                    <div class=""step-card-counter"">
                                        <div class=""counter rounded-circle"">1</div>
                                    </div>

");
#nullable restore
#line 172 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                     if (ViewBag.ThreeStepHelp.Success)
                                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                        <div class=\"step-card-body\">\n                                            ");
#nullable restore
#line 175 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                       Write(ViewBag.ThreeStepHelp.Enything.Step1);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                                        </div>\n");
#nullable restore
#line 177 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                    }
                                    else
                                    {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                        <div class=""step-card-body"">
                                            By clicking on the large box above, you can select the desired file from the files in your system, and it is acceptable if the file has the correct format
                                        </div>
");
#nullable restore
#line 183 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                </div>
                            </div>

                            <!-- how work tools step 2 -->
                            <div class=""col-12 col-lg-4"">
                                <div class=""work-tools-step-card"">
                                    <div class=""step-card-counter"">
                                        <div class=""counter rounded-circle"">2</div>
                                    </div>
                                    <div class=""step-card-body"">
");
#nullable restore
#line 194 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                         if (ViewBag.ThreeStepHelp.Success)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <div class=\"step-card-body\">\n                                                ");
#nullable restore
#line 197 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                           Write(ViewBag.ThreeStepHelp.Enything.Step2);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                                            </div>\n");
#nullable restore
#line 199 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                        }
                                        else
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                            <div class=""step-card-body"">
                                                Using the buttons below the large box, you can upload the file to start the process or go back to the previous step to change the file
                                            </div>
");
#nullable restore
#line 205 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                    </div>
                                </div>
                            </div>

                            <!-- how work tools step 3 -->
                            <div class=""col-12 col-lg-4"">
                                <div class=""work-tools-step-card"">
                                    <div class=""step-card-counter"">
                                        <div class=""counter rounded-circle"">3</div>
                                    </div>
                                    <div class=""step-card-body"">

");
#nullable restore
#line 218 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                         if (ViewBag.ThreeStepHelp.Success)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <div class=\"step-card-body\">\n                                                ");
#nullable restore
#line 221 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                           Write(ViewBag.ThreeStepHelp.Enything.Step3);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                                            </div>\n");
#nullable restore
#line 223 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                        }
                                        else
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                            <div class=""step-card-body"">
                                                Processing does not take much time. After a few minutes, you can download the output file in 4 ways
                                            </div>
");
#nullable restore
#line 229 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n");
#nullable restore
#line 236 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                     if (ViewBag.ThreeStepHelp.Enything.VideoName != null)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <h3>Video tutorial on how to convert Html to PDF</h3>\n                        <p>In this video, you will learn how to convert a Html file to PDF in a few minutes</p>\n");
#nullable restore
#line 240 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                        string posterName = "How-to-Convert-Html-files-to-Pdf-without-losing-formatting.jpg";

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    <video");
            BeginWriteAttribute("poster", " poster=\"", 14846, "\"", 14931, 3);
#nullable restore
#line 241 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
WriteAttributeValue("", 14855, Common.GetPath.GetHelpVideoPath().Replace("wwwroot", ""), 14855, 57, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 14912, "/poster/", 14912, 8, true);
#nullable restore
#line 241 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
WriteAttributeValue("", 14920, posterName, 14920, 11, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" alt=\"Help Video\" title=\"Video tutorial on working with tools\"");
            BeginWriteAttribute("style", " style=\"", 14994, "\"", 15086, 6);
            WriteAttributeValue("", 15002, "max-height:", 15002, 11, true);
#nullable restore
#line 241 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
WriteAttributeValue(" ", 15013, Common.GetPath.GetVideoSize(), 15014, 30, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 15044, ";", 15044, 1, true);
            WriteAttributeValue(" ", 15045, "position:center;", 15046, 17, true);
            WriteAttributeValue(" ", 15062, "background-color:", 15063, 18, true);
            WriteAttributeValue(" ", 15080, "#000;", 15081, 6, true);
            EndWriteAttribute();
            WriteLiteral(" controls class=\"video-help\">\n");
#nullable restore
#line 242 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                             foreach (var item in Common.Formating.VideosFormat)
                            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                <source");
            BeginWriteAttribute("src", " src=\"", 15267, "\"", 15372, 3);
#nullable restore
#line 244 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
WriteAttributeValue("", 15273, Common.GetPath.GetHelpVideoPath().Replace("wwwroot", ""), 15273, 57, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 15330, "/", 15330, 1, true);
#nullable restore
#line 244 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
WriteAttributeValue("", 15331, ViewBag.ThreeStepHelp.Enything.VideoName, 15331, 41, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            BeginWriteAttribute("type", " type=\"", 15373, "\"", 15391, 2);
            WriteAttributeValue("", 15380, "video/", 15380, 6, true);
#nullable restore
#line 244 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
WriteAttributeValue("", 15386, item, 15386, 5, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\n");
#nullable restore
#line 245 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                            }

#line default
#line hidden
#nullable disable
            WriteLiteral("                            Your browser does not support the video display\n                        </video>\n");
#nullable restore
#line 248 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </div>\n            </div>\n            <!-- end how work tools -->\n            <!-- start other content -->\n            ");
#nullable restore
#line 253 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
       Write(await Component.InvokeAsync("GetAdditionalHelp",Domain.Entities.Features.ConverterToPdf.HtmlToPdf));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            <!-- end other content -->\n\n            <!-- start section main services info box -->\n            ");
#nullable restore
#line 257 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
       Write(await Component.InvokeAsync("GetHelpContext",Model));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            <!-- end section main services info box -->\n\n            <!--start blog posts slides-->\n            ");
#nullable restore
#line 261 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
       Write(await Component.InvokeAsync("GetBlogPosts", @Domain.Entities.Features.ConverterToPdf.HtmlToPdf));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            <!--end blog posts slides-->\n            <!-- end section main services info box -->\n            ");
#nullable restore
#line 264 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
       Write(await Component.InvokeAsync("GetTools"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            ");
#nullable restore
#line 265 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
       Write(await Component.InvokeAsync("GetFAQ",ViewBag.FAQ));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
            <!-- start sectin main people say about us -->

            <div class=""section main-people-say-about-us"">
                <div class=""row justify-content-center text-center"">
                    <div class=""col-7"">
                        <h3>The Best Online Html to PDF Converter</h3>
                        <h4>Some User Comments</h4>
                    </div>

                    <div class=""main-people-saying-content"">
                        <div class=""row justify-content-center text-center"">
                            <div class=""col-7"">
                                <div id=""carouselExampleIndicators"" class=""carousel carousel-dark slide"" data-bs-ride=""carousel"">
                                    <div class=""carousel-indicators"">
");
#nullable restore
#line 280 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                         if (ViewBag.Comments.Success)
                                        {
                                            int cvv = 0;
                                            

#line default
#line hidden
#nullable disable
#nullable restore
#line 283 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                             for (int i = 1; i <= ViewBag.Comments.Enything.Count; i++)
                                            {

                                                if (cvv == 0)
                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"");
#nullable restore
#line 288 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                                                                                                   Write(cvv);

#line default
#line hidden
#nullable disable
            WriteLiteral("\" class=\"active\" aria-current=\"true\"");
            BeginWriteAttribute("aria-label", " aria-label=\"", 17749, "\"", 17770, 2);
            WriteAttributeValue("", 17762, "Slide", 17762, 5, true);
#nullable restore
#line 288 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
WriteAttributeValue(" ", 17767, i, 17768, 2, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral("></button>\n");
#nullable restore
#line 289 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                }
                                                else
                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"");
#nullable restore
#line 292 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                                                                                                   Write(cvv);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"");
            BeginWriteAttribute("aria-label", " aria-label=\"", 18076, "\"", 18097, 2);
            WriteAttributeValue("", 18089, "Slide", 18089, 5, true);
#nullable restore
#line 292 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
WriteAttributeValue(" ", 18094, i, 18095, 2, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral("></button>\n");
#nullable restore
#line 293 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                }
                                                cvv += 1;
                                            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 295 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                             
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </div>\n\n                                    <div class=\"carousel-inner\">\n");
#nullable restore
#line 300 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                         if (ViewBag.Comments.Success)
                                        {
                                            int cv = 1;
                                            string classname = "";
                                            

#line default
#line hidden
#nullable disable
#nullable restore
#line 304 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                             foreach (var item in ViewBag.Comments.Enything)
                                            {
                                                classname = cv == 1 ? "carousel-item active" : "carousel-item";

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                <div");
            BeginWriteAttribute("class", " class=\"", 18953, "\"", 18971, 1);
#nullable restore
#line 307 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
WriteAttributeValue("", 18961, classname, 18961, 10, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\n");
#nullable restore
#line 308 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                       cv = 0;

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <div class=\"people-saying-card\">\n                                                        <h5 class=\"person-fullname\">");
#nullable restore
#line 310 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                                               Write(item.UserName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h5>\n                                                        <div class=\"person-rate\">\n");
#nullable restore
#line 312 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                             for (int i = 1; i <= 5; i++)
                                                            {
                                                                

#line default
#line hidden
#nullable disable
#nullable restore
#line 314 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                                 if (item.Rate + 1 > i)
                                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                    <i class=\"bi bi-star-fill\" data-rating=\"");
#nullable restore
#line 316 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                                                                       Write(i);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"></i>\n");
#nullable restore
#line 317 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                                }
                                                                else
                                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                    <i class=\"bi bi-star\" data-rating=\"");
#nullable restore
#line 320 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                                                                  Write(i);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"></i>\n");
#nullable restore
#line 321 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 321 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                                 
                                                            }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                        </div>\n                                                        <p>");
#nullable restore
#line 324 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                                      Write(item.Message);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\n                                                    </div>\n                                                </div>\n");
#nullable restore
#line 327 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 327 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                             
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- end sectin main people say about us -->
        </div>
        <!-- end home main -->
    </div>
</main>
<!-- end main -->
<!-- start rate this page -->
");
#nullable restore
#line 343 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
Write(await Component.InvokeAsync("GetRatingPart"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n<!-- end rate this page -->\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\n<!-- script -->\n");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3432fb860562d8a284390df29ed7221ec32794bb48229d4c15338d3a7625938246038", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3432fb860562d8a284390df29ed7221ec32794bb48229d4c15338d3a7625938247156", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3432fb860562d8a284390df29ed7221ec32794bb48229d4c15338d3a7625938248274", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\n<script");
                BeginWriteAttribute("src", " src=\"", 21352, "\"", 21446, 2);
                WriteAttributeValue("", 21358, "https://www.google.com/recaptcha/api.js?render=", 21358, 47, true);
#nullable restore
#line 353 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
WriteAttributeValue("", 21405, GoogleCaptchaConfig.Value.Google_SiteKey, 21405, 41, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral("></script>\n\n<script>\n                grecaptcha.ready(function () {\n                    grecaptcha.execute(\'");
#nullable restore
#line 357 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                   Write(GoogleCaptchaConfig.Value.Google_SiteKey);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', { action: 'submit' }).then(function (token) {
                        document.getElementById(""cpth"").value = token;
                    });
                });
</script>


<script>
    // rating page
    const ratingStars = [...document.getElementsByClassName(""rating__star"")];

    function executeRating(stars) {
        const starClassActive = ""rating__star bi bi-star-fill"";
        const starClassInactive = ""rating__star bi bi-star"";
        const starsLength = stars.length;
        let i;
        stars.map((star) => {
            star.onclick = () => {
                i = stars.indexOf(star);

                if (star.className === starClassInactive) {
                    for (i; i >= 0; --i) stars[i].className = starClassActive;
                } else {
                    for (i; i < starsLength; ++i) stars[i].className = starClassInactive;
                }
            };
        });
    }
    executeRating(ratingStars);

</script>

<script>
                var FileName = """";
                var Id ");
                WriteLiteral(@"= """";

                function Loading(State) {
                    try {
                        if (State == true) {
                            document.getElementById(""_Loading"").style.display = ""unset"";
                            document.getElementById(""Urlerror"").style.display = ""none"";
                            $(""#AddUrl"").modal('hide');
                        }
                        else {
                            document.getElementById(""_Loading"").style.display = ""none"";
                        }
                    }
                    catch { }
                }

                function SelectFile(State) {
                    if (State == true) {
                        document.getElementById(""triggerFile"").setAttribute('onclick', 'select()');
                        document.getElementById(""headertriggerFile"").style.cursor = ""pointer"";
                    }
                    else {
                        document.getElementById(""triggerFile"").setAttribute('onclick', '');
       ");
                WriteLiteral(@"                 document.getElementById(""headertriggerFile"").style.cursor = ""wait"";
                        var old_element = document.getElementById(""triggerFile"");
                        var new_element = old_element.cloneNode(true);
                        old_element.parentNode.replaceChild(new_element, old_element);

                    }
                }

                function Download(State, OutFile, Id) {
                    if (State == true) {
                        document.getElementById(""_Download"").style.display = ""inherit"";
                        document.getElementById(""btnDownload"").href = ""/Downloader/DownloadFile?OutFileName="" + OutFile + ""&Id="" + Id + ""&LogService="" + document.getElementById(""_BaseService"").textContent + """";
                        document.getElementById(""btnDownloadLink"").href = ""/download-link?OutFileName="" + OutFile + ""&Id="" + Id + ""&LogService="" + document.getElementById(""_BaseService"").textContent + """";
                    }
                    else {
       ");
                WriteLiteral(@"                 document.getElementById(""_Download"").style.display = ""none"";
                        document.getElementById(""btnDownload"").href = ""#"";
                        document.getElementById(""btnDownloadLink"").href = ""#"";
                    }
                }

    function basicValidation(value)
    {
        if (value.includes(""http"") == false || value.includes(""https"") == false || value.includes("":"") == false || value.includes(""."") == false || value.includes(""/"") == false) {
            return false;
        }
        else { return true;}
    }
    async function SendData() {
        var url = document.getElementById(""newurl"").value;
        if (basicValidation(url) == false) {
            document.getElementById(""Urlerror"").style.display = ""inherit"";
                        return;
        }

                    var formData = new FormData();
                    formData.append(""Url"", url);
        formData.append(""Recaptcha"", document.getElementById(""cpth"").value);

                    Loading");
                WriteLiteral(@"(true);
                    SelectFile(false);
                    Download(false);
                    await fetch('/ConvertToPdf/HtmlToPdfUpload/', {
                        method: ""POST"",
                        body: formData
                    })
                        .then(response => response.json())
                        .then((data) => {
                            Loading(false);
                            SelectFile(true);
                            if (data.success) {
                                Download(true, data.enything.outFileName, data.enything.id);
                                FileName = data.enything.outFileName;
                                Id = data.enything.id;
                            }
                            else {
                                swal.fire(
                                    ""warning"",
                                    data.message,
                                    ""warning""
                                );
                           ");
                WriteLiteral(@" }
                        })
                }

                async function SubmitEmail() {
                    var Data = new FormData();
                    Data.append(""FId"", Id);
                    Data.append(""OutFileName"", FileName);
                    Data.append(""UserEmail"", document.getElementById('UserEmail').value);

                    await fetch('/ConvertToPdf/SendFileToEmail/', {
                        method: ""POST"",
                        body: Data
                    })
                        .then(response => response.json())
                        .then((data) => {
                            if (data.success) {
                                swal.fire(
                                    ""success"",
                                    data.message,
                                    ""success""
                                );
                            }
                            else {
                                swal.fire(
                                    ""warning");
                WriteLiteral(@""",
                                    data.message,
                                    ""warning""
                                );
                            }
                        })
                }

                async function SendMessage() {
                    var Data = new FormData();
                    Data.append(""UserEmail"", document.getElementById(""Emailaddress"").value);
                    Data.append(""UserName"", document.getElementById(""FullName"").value);
                    Data.append(""Message"", document.getElementById(""Message"").value);
                    Data.append(""Recaptcha"", document.getElementById(""cpth"").value);
                    Data.append(""Service"", document.getElementById(""_Service"").textContent);

                    var rate = document.getElementsByClassName(""rating__star bi bi-star-fill"").length;
                    if (rate == 0) { rate = null; }
                    Data.append(""Rate"", rate);

                    await fetch('/ConvertToPdf/UserMessage/', {
       ");
                WriteLiteral(@"                 method: ""POST"",
                        body: Data
                    })
                        .then(response => response.json())
                        .then((data) => {
                            if (data.success) {
                                document.getElementById(""Emailaddress"").value = """";
                                document.getElementById(""FullName"").value = """";
                                swal.fire(
                                    ""success"",
                                    data.message,
                                    ""success""
                                );
                            }
                            else {
                                swal.fire(
                                    ""warning"",
                                    data.message,
                                    ""warning""
                                );
                            }
                        })
                }


                function select() {
");
                WriteLiteral("                    grecaptcha.execute(\'");
#nullable restore
#line 547 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
                                   Write(GoogleCaptchaConfig.Value.Google_SiteKey);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', { action: 'submit' }).then(function (token) {
                        document.getElementById(""cpth"").value = token;
                    });

                    Download(false);
                    Loading(false);
                    $(""#AddUrl"").modal('show');
                }

                function CancelProcess() {
                    location.reload();
                }
</script>
");
            }
            );
#nullable restore
#line 561 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
  
    string basic = Domain.Entities.Features.ConverterToPdf.HtmlToPdf + ".json";
    string SchemaFile = Common.Formating.StandardFaqSchemaFileName + basic;
    string SchemaHowToFile = Common.Formating.StandardHowToSchemaFileName + basic;
    string SchemaVideoFile = Common.Formating.StandardVideoSchemaFileName + basic;

#line default
#line hidden
#nullable disable
            DefineSection("Schemas", async() => {
                WriteLiteral("\n                        <script type=\"application/ld+json\">\n        ");
#nullable restore
#line 569 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
   Write(Html.Raw(Common.Schema.SchemaReader.ReadToEnd(SchemaFile,true,Common.Schema.SchemaType.Faq)));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n        ");
#nullable restore
#line 570 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
   Write(Html.Raw(Common.Schema.SchemaReader.ReadToEnd(SchemaHowToFile,true,Common.Schema.SchemaType.HowTo)));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n        ");
#nullable restore
#line 571 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\HtmlToPdf.cshtml"
   Write(Html.Raw(Common.Schema.SchemaReader.ReadToEnd(SchemaVideoFile,true,Common.Schema.SchemaType.Video)));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n                            </script>\n");
            }
            );
            WriteLiteral("\n");
            DefineSection("Modals", async() => {
                WriteLiteral(@"
    <!-- Modal Add Email -->
    <div class=""modal fade"" id=""AddUrl"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalCenterTitle"" aria-hidden=""true"">
        <div class=""modal-dialog modal-dialog-centered modal-lg"" role=""document"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <h5 class=""modal-title"" id=""exampleModalLongTitle"">Write the website URL</h5>
                    <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
                </div>
                <div class=""modal-body"">
                    <div class=""col-xl-12 col-lg-12 col-md-12 mb-1"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3432fb860562d8a284390df29ed7221ec32794bb48229d4c15338d3a7625938262322", async() => {
                    WriteLiteral(@"
                            <fieldset class=""form-group"">
                                <input type=""url"" id=""newurl"" class=""form-control mb-3"" placeholder=""Url"">
                                <p style=""color:crimson;display:none"" id=""Urlerror"">The given URL is invalid. Please check to see if it is written correctly</p>
                            </fieldset>
                        ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                    </div>
                </div>
                <div class=""modal-footer"">
                    <button onclick=""SendData()"" class=""btn btn-outline-primary w-100"">Convert</button>
                </div>
            </div>
        </div>
    </div>

<!-- Modal Add Email -->
<div class=""modal fade"" id=""AddEmail"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalCenterTitle"" aria-hidden=""true"">
    <div class=""modal-dialog modal-dialog-centered"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <p class=""modal-title"" id=""exampleModalLongTitle"">Send To Email</p>
                <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
            </div>
            <div class=""modal-body"">
                <div class=""col-xl-12 col-lg-12 col-md-12 mb-1"">
                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3432fb860562d8a284390df29ed7221ec32794bb48229d4c15338d3a7625938265155", async() => {
                    WriteLiteral(@"
                        <fieldset class=""form-group"">

                            <input type=""text"" class=""form-control"" id=""OutName"" style=""visibility:hidden"">
                            <label for=""basicInput"">YourEmail</label>
                            <input type=""email"" class=""form-control"" id=""UserEmail"" placeholder=""PdfConverter@example.com"" required>
                            <input type=""text"" class=""form-control"" id=""FId"" style=""visibility:hidden"">
                        </fieldset>
                    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                </div>
            </div>
            <div class=""modal-footer"">
                <a class=""btn btn-secondary"" data-bs-dismiss=""modal"">Cancel</a>
                <a class=""btn btn-primary"" data-bs-dismiss=""modal"" onclick=""SubmitEmail()"">Submit</a>
            </div>
        </div>
    </div>
</div>
");
            }
            );
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public Microsoft.Extensions.Options.IOptions<EndPoint.Models.GoogleCaptchaConfigModel> GoogleCaptchaConfig { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Common.ResultMessage<Application.Services.Query.ReturnFeatureDetails.ResultReturnFeatureDetailsDto>> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
