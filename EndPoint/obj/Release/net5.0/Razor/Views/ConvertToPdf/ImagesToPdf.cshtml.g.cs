#pragma checksum "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "e6b67954435b4f33f670b39bf95c434877150b4839a20821a6bc3a259cd1a1e6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ConvertToPdf_ImagesToPdf), @"mvc.1.0.view", @"/Views/ConvertToPdf/ImagesToPdf.cshtml")]
namespace AspNetCore
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "S:\navid\PdfConverter\EndPoint\Views\_ViewImports.cshtml"
using EndPoint;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "S:\navid\PdfConverter\EndPoint\Views\_ViewImports.cshtml"
using EndPoint.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"e6b67954435b4f33f670b39bf95c434877150b4839a20821a6bc3a259cd1a1e6", @"/Views/ConvertToPdf/ImagesToPdf.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"4359f7b64bc44f353b6ba2c74169ca926fe29f79fcf1cc193d694a5e6fd5976e", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_ConvertToPdf_ImagesToPdf : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Common.ResultMessage<Application.Services.Query.ReturnFeatureDetails.ResultReturnFeatureDetailsDto>>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/loading.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/Content.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Sweetalert2/sweetalert2.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/uploadfile-merg.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/bootstrap.bundle.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Sweetalert2/sweetalert2.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("Details"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
  
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\n");
            DefineSection("Header", async() => {
                WriteLiteral("\n    <link rel=\"canonical\"");
                BeginWriteAttribute("href", " href=\"", 310, "\"", 364, 2);
#nullable restore
#line 8 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
WriteAttributeValue("", 317, Common.GetPath.GetDomainHttps(), 317, 32, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 349, "/images-to-pdf/", 349, 15, true);
                EndWriteAttribute();
                WriteLiteral(" />\n    ");
#nullable restore
#line 9 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
Write(await Component.InvokeAsync("GetMetaTags", "ImagesToPdf"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e6b67954435b4f33f670b39bf95c434877150b4839a20821a6bc3a259cd1a1e67909", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e6b67954435b4f33f670b39bf95c434877150b4839a20821a6bc3a259cd1a1e69117", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e6b67954435b4f33f670b39bf95c434877150b4839a20821a6bc3a259cd1a1e610317", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <style>

        .upload .upload-files .body p b,
        .upload .upload-files .body p a {
            color: #7E57C2 !important;
        }

        .upload .upload-files footer .importar,
        .upload .upload-files footer .upload-btn {
            color: #fff !important;
            background-color: #7E57C2 !important;
        }

        .upload .upload-files footer .divider {
            border-top: solid 4px #2740cf;
        }

        .upload .upload-files header {
            background: #7E57C2 !important;
        }

        .upload .upload-files footer .list-files .file .progress {
            background: linear-gradient(to left, #ffc92860, #7E57C2) no-repeat;
        }

        .upload .upload-files footer .list-files .file .done {
            background: #7E57C2
        }

        .upload .upload-files .body ul {
            list-style: none;
        }

        .upload .upload-files .body i {
            font-size: 1rem !important;
        }

            .upload .upload-files .body i:hover ");
                WriteLiteral(@"{
                color: red;
            }

        .upload .upload-files footer {
            height: 100%;
        }

        .dark-mode .upload .upload-files .body p {
            color: #fff;
        }
    </style>
    <script src=""https://www.google.com/recaptcha/api.js?hl=en""></script>
");
            }
            );
            WriteLiteral(@"<br />
<br />

<!-- start main -->
<main>
    <div class=""container"">
        <!-- start home main -->
        <div class=""home-main text-center"">

            <!-- start file upload box -->
            <div class=""section main-file-upload-box"">
                <div class=""row align-items-center text-center"">

                    <div class=""col-12"">
                        <div class=""file-upload-box-header d-flex text-center align-items-center justify-content-center w-100 mt-5"">
                            <svg style=""width:34px;height:34px"" viewBox=""0 0 24 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""><path d=""M0 4C0 1.79086 1.79086 0 4 0H20C22.2091 0 24 1.79086 24 4V20C24 22.2091 22.2091 24 20 24H4C1.79086 24 0 22.2091 0 20V4Z"" fill=""#7E57C2""></path><rect x=""5.5"" y=""5.5"" width=""8"" height=""10"" stroke=""white""></rect><path d=""M5.5 12.5L7 11L9.5 13.5L11 12L13.5 14.5"" stroke=""white""></path><circle cx=""11"" cy=""8"" r=""0.5"" fill=""white"" stroke=""white""></circle><path d=""M14 8.5H18.5V18.5001H10.5V15.5001"" strok");
            WriteLiteral("e=\"white\"></path></svg>\n                            <h1 class=\"h3 ms-3\">Convert Images To PDF</h1>\n                        </div>\n                         <p>");
#nullable restore
#line 82 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                       Write(Model.Enything.FirstParagraph);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\n                         <p>");
#nullable restore
#line 83 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                       Write(Model.Enything.SecendParagraph);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</p>
                    </div>

                    <!-- upload file box -->
                    <div class=""col-12"">
                        <div class=""upload"">
                            <div class=""upload-files"">
                                <a onclick=""select()"" id=""triggerFile"">
                                    <header style=""cursor:pointer"" id=""headertriggerFile"">
                                        <p>
                                            <i class=""fa fa-cloud-upload"" aria-hidden=""true""></i>
                                            <span class=""up bi bi-cloud-arrow-up"">Choose</span>
                                            <span class=""load"">File</span>
                                        </p>
                                    </header>
                                </a>
                                <i id=""_Service"" style=""display:none"">");
#nullable restore
#line 99 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                                 Write(Domain.Entities.Features.ConverterToPdf.ImagesToPdf);

#line default
#line hidden
#nullable disable
            WriteLiteral("</i>\n                                <i id=\"_BaseService\" style=\"display:none\">");
#nullable restore
#line 100 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                                     Write(Domain.Entities.Logs.AllServicesLog.ConverterLog);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</i>

                                <div class=""body"" id=""drop"">
                                    <div class=""row files"" id=""files1"">
                                        <p class=""pointer-none"">FILES </p>
                                        <input type=""file"" id=""_upload"" onchange=""AddFile()"" accept=""image/*"" multiple=""multiple"" />
                                        <br />
                                        <ul class=""fileList""></ul>
                                    </div>
                                </div>

                                <div id=""footer"">
                                    <p class=""pointer-none""> Or Upload From</p>
                                    <!-- upload from -->
                                    <div class=""upload-other-location"">
                                        <div class=""other-location-circle google-drive""><a href=""/GoogleDrive/auth"" data-bs-toggle=""tooltip"" data-bs-placement=""top"" title=""Google Drive""></a></div>
                        ");
            WriteLiteral(@"                <div class=""other-location-circle drop-box""><a href=""#"" data-bs-toggle=""tooltip"" data-bs-placement=""top"" title=""DropBox""></a></div>
                                    </div>




                                    <footer>
                                        <div class=""divider"">
                                            <span><AR>FILES</AR></span>
                                        </div>
                                        <div class=""list-files"">
                                            <!--   template   -->
                                        </div>


                                        <button onclick=""SendData()"" id=""btnUpload"" class=""upload-btn active btn"" data-bs-toggle=""modal"">Upload and Convert</button>

                                    </footer>
                                </div>

                                <!--Loading part-->
                                <div id=""_Loading"" style=""display:none"">
                                    <svg class");
            WriteLiteral(@"=""w-0"">
                                        <defs>
                                            <filter id=""w-0"">
                                                <feGaussianBlur in=""SourceGraphic"" stdDeviation=""7"" result=""blur"" />
                                                <feColorMatrix in=""blur""
                                                               mode=""matrix""
                                                               values=""1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 20 -10""
                                                               result=""res"" />
                                                <feComposite in=""SourceGraphic"" in2=""res"" operator=""atop"" />
                                            </filter>
                                        </defs>
                                    </svg>

                                    <svg class=""f-w-0"" width=""200"" height=""200"" viewBox=""0 0 200 200"">
                                        <defs>
                                         ");
            WriteLiteral(@"   <linearGradient id=""linear-gradient"">
                                                <stop class=""stop1"" offset=""0"" />
                                                <stop class=""stop2"" offset=""1"" />
                                            </linearGradient>
                                            <linearGradient y2=""160""
                                                            x2=""160""
                                                            y1=""40""
                                                            x1=""40""
                                                            gradientUnits=""userSpaceOnUse""
                                                            id=""gradient""
                                                            xlink:href=""#linear-gradient"" />
                                        </defs>

                                        <path class=""path-class""
                                              d=""m 164,100 c 0,-35.346224 -28.65378,-64 -64,-64 -35.346224,0 -6");
            WriteLiteral(@"4,28.653776
           -64,64 0,35.34622 28.653776,64 64,64 35.34622,0 64,-26.21502 64,-64
           0,-37.784981 -26.92058,-64 -64,-64 -37.079421,0 -65.267479,26.922736
           -64,64 1.267479,37.07726 26.703171,65.05317 64,64 37.29683,-1.05317
           64,-64 64,-64"" />
                                        <circle class=""cricle-class"" cx=""100"" cy=""100"" r=""64"" />

                                    </svg>
                                <div class=""progress"">
                                    <div class=""progress-done"" id=""progressBar"" data-done=""70"">
                                                                                
                                     </div>
                                </div>
                                <br>
                                <h3 id=""status""></h3><br>
                                <p id=""uploaded_progress""></p>

                                    <p>Processing...</p>
                                    <a onclick=""CancelProcess()"" class=""b");
            WriteLiteral(@"tn btn-outline-primary mt-4"">Cancel</a>

                                </div>

                                <!-- download part -->
                                <div class=""dropdown"" id=""_Download"" style=""display:none"">
                                    <p>File SuccessFully Converted</p>
                                    <button");
            BeginWriteAttribute("style", " style=\"", 9754, "\"", 9762, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""btn btn-primary btn-lg dropdown-toggle px-5"" type=""button"" id=""dropdownMenuButton1"" data-bs-toggle=""dropdown"" aria-expanded=""false"">
                                        Download
                                    </button>
                                    <ul class=""dropdown-menu"" aria-labelledby=""dropdownMenuButton1"">
                                        <li><a class=""dropdown-item"" href=""#"" id=""btnDownload""> <i class=""bi bi-hdd-fill"" style=""font-size: 1rem; color: crimson;""></i> Download</a></li>
                                        <li><hr class=""dropdown-divider""></li>
                                        <li><a class=""dropdown-item"" href=""#""> <i class=""bi bi-google"" style=""font-size: 1rem; color: cornflowerblue;""></i> Send To GoogleDrive</a></li>
                                        <li><hr class=""dropdown-divider""></li>
                                        <li><a class=""dropdown-item"" href=""#""> <i class=""bi bi-box2-heart-fill"" style=""font-size: 1rem; color: cornflowerblue;");
            WriteLiteral(@"""></i> Send To DropBox</a></li><!-- or this bi bi-archive-fill -->
                                        <li><hr class=""dropdown-divider""></li>
                                        <li><a class=""dropdown-item"" data-bs-toggle=""modal"" href=""#AddEmail""> <i class=""bi bi-envelope-paper-heart-fill"" style=""font-size: 1rem; color: crimson;""></i> Send To Your Email</a></li>
                                        <li><hr class=""dropdown-divider""></li>
                                        <li><a class=""dropdown-item"" target=""_blank"" href=""#"" id=""btnDownloadLink""> <i class=""bi bi-envelope-paper-heart-fill"" style=""font-size: 1rem; color: crimson;""></i> Download Link</a></li>
                                    </ul>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- end file upload box -->
            <!-- start how work tools -->
            <div class=""section main-how-wor");
            WriteLiteral(@"k-tools-box"">
                <div class=""row justify-content-center text-center"">


                    <div class=""col-12 mb-5"">

                        <h2>How To Convert IMages To Pdf Online for Free</h2>
                        <p>You are only 3 steps away from converting the file images to pdf</p>
                    </div>

                    <div class=""main-how-work-tools-content"">
                        <div class=""row align-items-center text-center"">

                            <!-- how work tools step 1 -->
                            <div class=""col-12 col-lg-4"">
                                <div class=""work-tools-step-card"">
                                    <div class=""step-card-counter"">
                                        <div class=""counter rounded-circle"">1</div>
                                    </div>

");
#nullable restore
#line 235 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                     if (ViewBag.ThreeStepHelp.Success)
                                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                        <div class=\"step-card-body\">\n                                            ");
#nullable restore
#line 238 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                       Write(ViewBag.ThreeStepHelp.Enything.Step1);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                                        </div>\n");
#nullable restore
#line 240 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                    }
                                    else
                                    {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                        <div class=""step-card-body"">
                                            By clicking on the large box above, you can select the desired file from the files in your system, and it is acceptable if the file has the correct format
                                        </div>
");
#nullable restore
#line 246 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                </div>
                            </div>

                            <!-- how work tools step 2 -->
                            <div class=""col-12 col-lg-4"">
                                <div class=""work-tools-step-card"">
                                    <div class=""step-card-counter"">
                                        <div class=""counter rounded-circle"">2</div>
                                    </div>
                                    <div class=""step-card-body"">
");
#nullable restore
#line 257 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                         if (ViewBag.ThreeStepHelp.Success)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <div class=\"step-card-body\">\n                                                ");
#nullable restore
#line 260 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                           Write(ViewBag.ThreeStepHelp.Enything.Step2);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                                            </div>\n");
#nullable restore
#line 262 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                        }
                                        else
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                            <div class=""step-card-body"">
                                                Using the buttons below the large box, you can upload the file to start the process or go back to the previous step to change the file
                                            </div>
");
#nullable restore
#line 268 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                    </div>
                                </div>
                            </div>

                            <!-- how work tools step 3 -->
                            <div class=""col-12 col-lg-4"">
                                <div class=""work-tools-step-card"">
                                    <div class=""step-card-counter"">
                                        <div class=""counter rounded-circle"">3</div>
                                    </div>
                                    <div class=""step-card-body"">

");
#nullable restore
#line 281 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                         if (ViewBag.ThreeStepHelp.Success)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <div class=\"step-card-body\">\n                                                ");
#nullable restore
#line 284 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                           Write(ViewBag.ThreeStepHelp.Enything.Step3);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                                            </div>\n");
#nullable restore
#line 286 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                        }
                                        else
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                            <div class=""step-card-body"">
                                                Processing does not take much time. After a few minutes, you can download the output file in 4 ways
                                            </div>
");
#nullable restore
#line 292 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n");
#nullable restore
#line 299 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                     if (ViewBag.ThreeStepHelp.Enything.VideoName != null)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <h3>Video tutorial on how to convert Images to PDF</h3>\n                        <p>In this video, you will learn how to convert a Images file to PDF in a few minutes</p>\n");
#nullable restore
#line 303 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                        string posterName = "How-to-Convert-images-to-PDF-in-a-few-minutes.jpg";

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <video");
            BeginWriteAttribute("poster", " poster=\"", 16692, "\"", 16777, 3);
#nullable restore
#line 304 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
WriteAttributeValue("", 16701, Common.GetPath.GetHelpVideoPath().Replace("wwwroot", ""), 16701, 57, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 16758, "/poster/", 16758, 8, true);
#nullable restore
#line 304 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
WriteAttributeValue("", 16766, posterName, 16766, 11, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" alt=\"Help Video\" title=\"Video tutorial on working with tools\"");
            BeginWriteAttribute("style", " style=\"", 16840, "\"", 16971, 9);
            WriteAttributeValue("", 16848, "width:", 16848, 6, true);
#nullable restore
#line 304 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
WriteAttributeValue(" ", 16854, Common.GetPath.GetVideoSize(), 16855, 30, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 16885, ";", 16885, 1, true);
            WriteAttributeValue(" ", 16886, "max-height:", 16887, 12, true);
#nullable restore
#line 304 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
WriteAttributeValue(" ", 16898, Common.GetPath.GetVideoSize(), 16899, 30, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 16929, ";", 16929, 1, true);
            WriteAttributeValue(" ", 16930, "position:center;", 16931, 17, true);
            WriteAttributeValue(" ", 16947, "background-color:", 16948, 18, true);
            WriteAttributeValue(" ", 16965, "#000;", 16966, 6, true);
            EndWriteAttribute();
            WriteLiteral(" controls>\n");
#nullable restore
#line 305 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                             foreach (var item in Common.Formating.VideosFormat)
                            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                <source");
            BeginWriteAttribute("src", " src=\"", 17133, "\"", 17238, 3);
#nullable restore
#line 307 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
WriteAttributeValue("", 17139, Common.GetPath.GetHelpVideoPath().Replace("wwwroot", ""), 17139, 57, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 17196, "/", 17196, 1, true);
#nullable restore
#line 307 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
WriteAttributeValue("", 17197, ViewBag.ThreeStepHelp.Enything.VideoName, 17197, 41, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            BeginWriteAttribute("type", " type=\"", 17239, "\"", 17257, 2);
            WriteAttributeValue("", 17246, "video/", 17246, 6, true);
#nullable restore
#line 307 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
WriteAttributeValue("", 17252, item, 17252, 5, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\n");
#nullable restore
#line 308 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                            }

#line default
#line hidden
#nullable disable
            WriteLiteral("                            Your browser does not support the video display\n                        </video>\n");
#nullable restore
#line 311 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </div>\n            </div>\n            <!-- end how work tools -->\n           \n            <!-- start other content -->\n            ");
#nullable restore
#line 317 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
       Write(await Component.InvokeAsync("GetAdditionalHelp",Domain.Entities.Features.ConverterToPdf.ImagesToPdf));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            <!-- end other content -->\n\n            <!-- start section main services info box -->\n            ");
#nullable restore
#line 321 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
       Write(await Component.InvokeAsync("GetHelpContext",Model));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            <!-- end section main services info box -->\n\n            <!--start blog posts slides-->\n            ");
#nullable restore
#line 325 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
       Write(await Component.InvokeAsync("GetBlogPosts", @Domain.Entities.Features.ConverterToPdf.ImagesToPdf));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            <!--end blog posts slides-->\n            <!-- end section main services info box -->\n            ");
#nullable restore
#line 328 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
       Write(await Component.InvokeAsync("GetTools"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            ");
#nullable restore
#line 329 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
       Write(await Component.InvokeAsync("GetFAQ",ViewBag.FAQ));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
            <!-- start sectin main people say about us -->
            <div class=""section main-people-say-about-us"">
                <div class=""row justify-content-center text-center"">
                    <div class=""col-7"">
                        <h3>The Best Online Images to PDF Converter</h3>
                        <h4>Some User Comments</h4>
                    </div>

                    <div class=""main-people-saying-content"">
                        <div class=""row justify-content-center text-center"">
                            <div class=""col-7"">
                                <div id=""carouselExampleIndicators"" class=""carousel carousel-dark slide"" data-bs-ride=""carousel"">
                                    <div class=""carousel-indicators"">
");
#nullable restore
#line 343 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                         if (ViewBag.Comments.Success)
                                        {
                                            int cvv = 0;
                                            

#line default
#line hidden
#nullable disable
#nullable restore
#line 346 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                             for (int i = 1; i <= ViewBag.Comments.Enything.Count; i++)
                                            {

                                                if (cvv == 0)
                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"");
#nullable restore
#line 351 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                                                                                                   Write(cvv);

#line default
#line hidden
#nullable disable
            WriteLiteral("\" class=\"active\" aria-current=\"true\"");
            BeginWriteAttribute("aria-label", " aria-label=\"", 19632, "\"", 19653, 2);
            WriteAttributeValue("", 19645, "Slide", 19645, 5, true);
#nullable restore
#line 351 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
WriteAttributeValue(" ", 19650, i, 19651, 2, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral("></button>\n");
#nullable restore
#line 352 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                }
                                                else
                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"");
#nullable restore
#line 355 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                                                                                                   Write(cvv);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"");
            BeginWriteAttribute("aria-label", " aria-label=\"", 19959, "\"", 19980, 2);
            WriteAttributeValue("", 19972, "Slide", 19972, 5, true);
#nullable restore
#line 355 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
WriteAttributeValue(" ", 19977, i, 19978, 2, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral("></button>\n");
#nullable restore
#line 356 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                }
                                                cvv += 1;
                                            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 358 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                             
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </div>\n\n                                    <div class=\"carousel-inner\">\n");
#nullable restore
#line 363 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                         if (ViewBag.Comments.Success)
                                        {
                                            int cv = 1;
                                            string classname = "";
                                            

#line default
#line hidden
#nullable disable
#nullable restore
#line 367 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                             foreach (var item in ViewBag.Comments.Enything)
                                            {
                                                classname = cv == 1 ? "carousel-item active" : "carousel-item";

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                <div");
            BeginWriteAttribute("class", " class=\"", 20836, "\"", 20854, 1);
#nullable restore
#line 370 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
WriteAttributeValue("", 20844, classname, 20844, 10, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\n");
#nullable restore
#line 371 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                       cv = 0;

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <div class=\"people-saying-card\">\n                                                        <h5 class=\"person-fullname\">");
#nullable restore
#line 373 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                                               Write(item.UserName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h5>\n                                                        <div class=\"person-rate\">\n");
#nullable restore
#line 375 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                             for (int i = 1; i <= 5; i++)
                                                            {
                                                                

#line default
#line hidden
#nullable disable
#nullable restore
#line 377 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                                 if (item.Rate >= i)
                                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                    <i class=\"bi bi-star-fill\" data-rating=\"");
#nullable restore
#line 379 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                                                                       Write(i);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"></i>\n");
#nullable restore
#line 380 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                                }
                                                                else
                                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                                    <i class=\"bi bi-star\" data-rating=\"");
#nullable restore
#line 383 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                                                                  Write(i);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"></i>\n");
#nullable restore
#line 384 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 384 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                                 
                                                            }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                        </div>\n                                                        <p>");
#nullable restore
#line 387 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                      Write(item.Message);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\n                                                    </div>\n                                                </div>\n");
#nullable restore
#line 390 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 390 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                             
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- end sectin main people say about us -->

        </div>
        <!-- end home main -->
    </div>
</main>
<!-- end main -->
<!-- start rate this page -->
");
#nullable restore
#line 407 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
Write(await Component.InvokeAsync("GetRatingPart"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n<!-- end rate this page -->\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\n<!-- script -->\n");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e6b67954435b4f33f670b39bf95c434877150b4839a20821a6bc3a259cd1a1e648527", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e6b67954435b4f33f670b39bf95c434877150b4839a20821a6bc3a259cd1a1e649645", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e6b67954435b4f33f670b39bf95c434877150b4839a20821a6bc3a259cd1a1e650763", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e6b67954435b4f33f670b39bf95c434877150b4839a20821a6bc3a259cd1a1e651881", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\n<script");
                BeginWriteAttribute("src", " src=\"", 23281, "\"", 23375, 2);
                WriteAttributeValue("", 23287, "https://www.google.com/recaptcha/api.js?render=", 23287, 47, true);
#nullable restore
#line 418 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
WriteAttributeValue("", 23334, GoogleCaptchaConfig.Value.Google_SiteKey, 23334, 41, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral("></script>\n\n<script>\n      \n        grecaptcha.ready(function () {\n            grecaptcha.execute(\'");
#nullable restore
#line 423 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                           Write(GoogleCaptchaConfig.Value.Google_SiteKey);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', { action: 'submit' }).then(function (token) {
                document.getElementById(""cpth"").value = token;
            });
        });
</script>


<script>
    // rating page
    const ratingStars = [...document.getElementsByClassName(""rating__star"")];

    function executeRating(stars) {
        const starClassActive = ""rating__star bi bi-star-fill"";
        const starClassInactive = ""rating__star bi bi-star"";
        const starsLength = stars.length;
        let i;
        stars.map((star) => {
            star.onclick = () => {
                i = stars.indexOf(star);

                if (star.className === starClassInactive) {
                    for (i; i >= 0; --i) stars[i].className = starClassActive;
                } else {
                    for (i; i < starsLength; ++i) stars[i].className = starClassInactive;
                }
            };
        });
    }
    executeRating(ratingStars);


</script>

<script>
    var FileName = """";
    var Id = """";
    var Files = [];

    function AddFile");
                WriteLiteral(@"() {
        var input = document.getElementById(""_upload"");
        let uniqe = true;
        for (var i = 0; i < input.files.length; i++) {
            for (var j = 0; j < Files.length; j++) {
                if (input.files[i] == Files[j]) {
                    uniqe = false;
                    break;
                }
            }
            if (uniqe == true) {
                Files.push(input.files[i]);
            }
        }
    }
    function RemoveFile(FileName) {
        for (var i = 0; i < Files.length; i++) {
            if (Files[i] != null) {
                if (Files[i].name == FileName) {
                    Files[i] = null;
                }
            }
        }
    }
    function Loading(State) {
        try {
            if (State == true) {
                document.getElementById(""_Loading"").style.display = ""unset"";
            }
            else {
                document.getElementById(""_Loading"").style.display = ""none"";
            }
        }
        catch { }
    }

    functio");
                WriteLiteral(@"n SelectFile(State) {
        if (State == true) {
            document.getElementById(""triggerFile"").setAttribute('onclick', 'select()');
            document.getElementById(""headertriggerFile"").style.cursor = ""pointer"";
        }
        else {
            document.getElementById(""triggerFile"").setAttribute('onclick', '');
            document.getElementById(""headertriggerFile"").style.cursor = ""wait"";
            var old_element = document.getElementById(""triggerFile"");
            var new_element = old_element.cloneNode(true);
            old_element.parentNode.replaceChild(new_element, old_element);

        }
    }

    function Download(State, OutFile, Id) {
        if (State == true) {
            document.getElementById(""_Download"").style.display = ""inherit"";
            document.getElementById(""btnDownload"").href = ""/Downloader/DownloadFile?OutFileName="" + OutFile + ""&Id="" + Id + ""&LogService="" + document.getElementById(""_BaseService"").textContent + """";
            document.getElementById(""btnDownloa");
                WriteLiteral(@"dLink"").href = ""/download-link?OutFileName="" + OutFile + ""&Id="" + Id + ""&LogService="" + document.getElementById(""_BaseService"").textContent + """";
        }
        else {
            document.getElementById(""_Download"").style.display = ""none"";
            document.getElementById(""btnDownload"").href = ""#"";
            document.getElementById(""btnDownloadLink"").href = ""#"";
        }
    }

    function OtherRowUpload(State) {
                if (State == false) {
            document.getElementById(""drop"").style.display = ""none"";
            document.getElementById(""footer"").style.display = ""none"";
        }

    }

    /* function TryConvert(State, FileName, Ip) {
         if (State == true) {
             document.getElementById(""btnTryConvert"").style.visibility = ""visible"";
         }
         else {
             document.getElementById(""btnTryConvert"").style.visibility = ""hidden"";
         }
     }*/

    async function SendData() {
        if (Files.length < 1) { return; }
        var Filter = /(\.jpg|\.jp");
                WriteLiteral(@"eg|\.png|\.bmp|\.gif|\.tiff|\.svg|\.avif|\.jfif|\.ico|\.)$/i;
        for (var i = 0; i < Files.length; i++) {
            if (Files[i] != null) {
                if (!Filter.exec(Files[i].name)) {
                    swal.fire
                        (
                            ""warning"",
                            ""."" + Files[i].name.substring(Files[i].name.lastIndexOf('.') + 1) + "" Format Invalid"",
                            ""warning""
                        );
                    return;
                }
            }
        }
        let count = 0;
        var formData = new FormData();
        for (var j = 0; j < Files.length; j++) {
            if (Files[j] != null) {
                count += 1;
                formData.append(""file"", Files[j]);
            }
        }
        formData.append(""Recaptcha"", document.getElementById(""cpth"").value);
        if (count > 0) {
            Loading(true);
            SelectFile(false);
            Download(false);
            OtherRowUpload(false);

      ");
                WriteLiteral(@"     var ajax = new XMLHttpRequest();
            ajax.upload.addEventListener(""progress"", progressHandler, false);
            ajax.addEventListener(""load"", completeHandler, false);
            ajax.addEventListener(""error"", errorHandler, false);
            ajax.addEventListener(""abort"", abortHandler, false);
            ajax.open(""POST"", ""/ConvertToPdf/ImageToPdfUpload/"");
            ajax.send(formData);

        } else {
            swal.fire(
                ""warning"",
                ""No File Selected!"",
                ""warning""
            );
        }
    }
   
function progressHandler(event) {
    var loaded = new Number((event.loaded / 1048576));//Make loaded a ""number"" and divide bytes to get Megabytes
    var total = new Number((event.total / 1048576));//Make total file size a ""number"" and divide bytes to get Megabytes
    document.getElementById(""uploaded_progress"").innerHTML =  ""Uploaded <b>"" + loaded.toPrecision(5) + ""</b> Megabytes of "" + total.toPrecision(5);
    $(""#uploaded_progress"").inn");
                WriteLiteral(@"erHTML = ""Uploaded <b>"" + loaded.toPrecision(5) + ""</b> Megabytes of "" + total.toPrecision(5);//String output
    var percent = (event.loaded / event.total) * 100;//Get percentage of upload progress
    $(""#progressBar"").innerHTML = Math.round(percent);//Round value to solid
    const progress = document.querySelector('.progress-done');
    progress.setAttribute(""data-done"" ,  Math.round(percent))
    progress.style.width = progress.getAttribute('data-done') + '%';
    $(""#status"").innerHTML = Math.round(percent) + ""% uploaded"";//String output
    document.getElementById(""status"").innerHTML = Math.round(percent) + ""% uploaded"";
}
function completeHandler(event) {
    Loading(false);
    SelectFile(true);
    const obj_upload_serv = JSON.parse(event.target.responseText)
    const progress = document.querySelector('.progress');
    if(obj_upload_serv.success){
        $(""#status"").innerHTML = ""Complate !"";
        progress.style.display = ""none""
        Download(true, obj_upload_serv.enything.outFileName, obj_u");
                WriteLiteral(@"pload_serv.enything.id);
                FileName = obj_upload_serv.enything.outFileName;
                Id = obj_upload_serv.enything.id;
    } 
    else if (obj_upload_serv.enything == null) {
                OtherRowUpload(true);
                swal.fire(
                    ""warning"",
                    obj_upload_serv.message,
                    ""warning""
                );
            }
    else {
                OtherRowUpload(true);
                //TryConvert(true, data.enything.filename, data.enything.userip);
                swal.fire(
                    ""warning"",
                    obj_upload_serv.message,
                    ""warning""
                );
    }
}
function errorHandler(event) {
    $(""#status"").innerHTML = ""Upload Failed"";//Switch status to upload failed
}
function abortHandler(event) {
    $(""#status"").innerHTML = ""Upload Aborted"";//Switch status to aborted
}

    async function SubmitEmail() {
        var Data = new FormData();
        Data.append(""FId"", Id);
        Data.");
                WriteLiteral(@"append(""OutFileName"", FileName);
        Data.append(""UserEmail"", document.getElementById('UserEmail').value);

        await fetch('/ConvertFromPdf/SendFileToEmail/', {
            method: ""POST"",
            body: Data
        })
            .then(response => response.json())
            .then((data) => {
                if (data.success) {
                    swal.fire(
                        ""success"",
                        data.message,
                        ""success""
                    );
                }
                else {
                    swal.fire(
                        ""warning"",
                        data.message,
                        ""warning""
                    );
                }
            })
    }

    async function SendMessage() {
        var Data = new FormData();
        Data.append(""UserEmail"", document.getElementById(""Emailaddress"").value);
        Data.append(""UserName"", document.getElementById(""FullName"").value);
        Data.append(""Message"", document.getElemen");
                WriteLiteral(@"tById(""Message"").value);
        Data.append(""Recaptcha"", document.getElementById(""cpth"").value);
        Data.append(""Service"", document.getElementById(""_Service"").textContent);

        var rate = document.getElementsByClassName(""rating__star bi bi-star-fill"").length;
        if (rate == 0) { rate = null; }
        Data.append(""Rate"", rate);

        await fetch('/ConvertFromPdf/UserMessage/', {
            method: ""POST"",
            body: Data
        })
            .then(response => response.json())
            .then((data) => {
                if (data.success) {
                    document.getElementById(""Emailaddress"").value = """";
                    document.getElementById(""FullName"").value = """";
                    swal.fire(
                        ""success"",
                        data.message,
                        ""success""
                    );
                }
                else {
                    swal.fire(
                        ""warning"",
                        data.message,
  ");
                WriteLiteral("                      \"warning\"\n                    );\n                }\n            })\n    }\n\n    function select() {\n                                                grecaptcha.execute(\'");
#nullable restore
#line 707 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
                                                               Write(GoogleCaptchaConfig.Value.Google_SiteKey);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', { action: 'submit' }).then(function (token) {
                        document.getElementById(""cpth"").value = token;
            });

        Download(false);
        Loading(false);
        OtherRowUpload(true);
        $(""#_upload"").click();
    }

    function CancelProcess() {
        location.reload();
    }

</script>
");
            }
            );
#nullable restore
#line 723 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
  
        string basic = Domain.Entities.Features.ConverterToPdf.ImagesToPdf + ".json";
    string SchemaFile = Common.Formating.StandardFaqSchemaFileName + basic;
    string SchemaHowToFile = Common.Formating.StandardHowToSchemaFileName + basic;
    string SchemaVideoFile = Common.Formating.StandardVideoSchemaFileName + basic;

#line default
#line hidden
#nullable disable
            DefineSection("Schemas", async() => {
                WriteLiteral("\n                        <script type=\"application/ld+json\">\n        ");
#nullable restore
#line 731 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
   Write(Html.Raw(Common.Schema.SchemaReader.ReadToEnd(SchemaFile,true,Common.Schema.SchemaType.Faq)));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n        ");
#nullable restore
#line 732 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
   Write(Html.Raw(Common.Schema.SchemaReader.ReadToEnd(SchemaHowToFile,true,Common.Schema.SchemaType.HowTo)));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n        ");
#nullable restore
#line 733 "S:\navid\PdfConverter\EndPoint\Views\ConvertToPdf\ImagesToPdf.cshtml"
   Write(Html.Raw(Common.Schema.SchemaReader.ReadToEnd(SchemaVideoFile,true,Common.Schema.SchemaType.Video)));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n                            </script>\n");
            }
            );
            WriteLiteral("\n");
            DefineSection("Modals", async() => {
                WriteLiteral(@"
<!-- Modal Add Email -->
<div class=""modal fade"" id=""AddEmail"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalCenterTitle"" aria-hidden=""true"">
    <div class=""modal-dialog modal-dialog-centered"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <p class=""modal-title"" id=""exampleModalLongTitle"">Send To Email</p>
                <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
            </div>
            <div class=""modal-body"">
                <div class=""col-xl-12 col-lg-12 col-md-12 mb-1"">
                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e6b67954435b4f33f670b39bf95c434877150b4839a20821a6bc3a259cd1a1e668174", async() => {
                    WriteLiteral(@"
                        <fieldset class=""form-group"">

                            <input type=""text"" class=""form-control"" id=""OutName"" style=""visibility:hidden"">
                            <label for=""basicInput"">YourEmail</label>
                            <input type=""email"" class=""form-control"" id=""UserEmail"" placeholder=""PdfConverter@example.com"" required>
                            <input type=""text"" class=""form-control"" id=""FId"" style=""visibility:hidden"">
                        </fieldset>
                    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                </div>
            </div>
            <div class=""modal-footer"">
                <a class=""btn btn-secondary"" data-bs-dismiss=""modal"">Cancel</a>
                <a class=""btn btn-primary"" data-bs-dismiss=""modal"" onclick=""SubmitEmail()"">Submit</a>
            </div>
        </div>
    </div>
</div>
");
            }
            );
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public Microsoft.Extensions.Options.IOptions<EndPoint.Models.GoogleCaptchaConfigModel> GoogleCaptchaConfig { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Common.ResultMessage<Application.Services.Query.ReturnFeatureDetails.ResultReturnFeatureDetailsDto>> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
